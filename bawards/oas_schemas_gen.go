// Code generated by ogen, DO NOT EDIT.

package bawards

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/ActivityFunc
// ActivityFunc represents sum type.
type ActivityFunc struct {
	Type               ActivityFuncType // switch on this field
	ActivityFuncSlice  ActivityFuncSlice
	ActivityFuncSort   ActivityFuncSort
	ActivityFuncFilter ActivityFuncFilter
	ActivityFuncMap    ActivityFuncMap
}

// ActivityFuncType is oneOf type of ActivityFunc.
type ActivityFuncType string

// Possible values for ActivityFuncType.
const (
	ActivityFuncSliceActivityFunc  ActivityFuncType = "ActivityFuncSlice"
	ActivityFuncSortActivityFunc   ActivityFuncType = "ActivityFuncSort"
	ActivityFuncFilterActivityFunc ActivityFuncType = "ActivityFuncFilter"
	ActivityFuncMapActivityFunc    ActivityFuncType = "ActivityFuncMap"
)

// IsActivityFuncSlice reports whether ActivityFunc is ActivityFuncSlice.
func (s ActivityFunc) IsActivityFuncSlice() bool { return s.Type == ActivityFuncSliceActivityFunc }

// IsActivityFuncSort reports whether ActivityFunc is ActivityFuncSort.
func (s ActivityFunc) IsActivityFuncSort() bool { return s.Type == ActivityFuncSortActivityFunc }

// IsActivityFuncFilter reports whether ActivityFunc is ActivityFuncFilter.
func (s ActivityFunc) IsActivityFuncFilter() bool { return s.Type == ActivityFuncFilterActivityFunc }

// IsActivityFuncMap reports whether ActivityFunc is ActivityFuncMap.
func (s ActivityFunc) IsActivityFuncMap() bool { return s.Type == ActivityFuncMapActivityFunc }

// SetActivityFuncSlice sets ActivityFunc to ActivityFuncSlice.
func (s *ActivityFunc) SetActivityFuncSlice(v ActivityFuncSlice) {
	s.Type = ActivityFuncSliceActivityFunc
	s.ActivityFuncSlice = v
}

// GetActivityFuncSlice returns ActivityFuncSlice and true boolean if ActivityFunc is ActivityFuncSlice.
func (s ActivityFunc) GetActivityFuncSlice() (v ActivityFuncSlice, ok bool) {
	if !s.IsActivityFuncSlice() {
		return v, false
	}
	return s.ActivityFuncSlice, true
}

// NewActivityFuncSliceActivityFunc returns new ActivityFunc from ActivityFuncSlice.
func NewActivityFuncSliceActivityFunc(v ActivityFuncSlice) ActivityFunc {
	var s ActivityFunc
	s.SetActivityFuncSlice(v)
	return s
}

// SetActivityFuncSort sets ActivityFunc to ActivityFuncSort.
func (s *ActivityFunc) SetActivityFuncSort(v ActivityFuncSort) {
	s.Type = ActivityFuncSortActivityFunc
	s.ActivityFuncSort = v
}

// GetActivityFuncSort returns ActivityFuncSort and true boolean if ActivityFunc is ActivityFuncSort.
func (s ActivityFunc) GetActivityFuncSort() (v ActivityFuncSort, ok bool) {
	if !s.IsActivityFuncSort() {
		return v, false
	}
	return s.ActivityFuncSort, true
}

// NewActivityFuncSortActivityFunc returns new ActivityFunc from ActivityFuncSort.
func NewActivityFuncSortActivityFunc(v ActivityFuncSort) ActivityFunc {
	var s ActivityFunc
	s.SetActivityFuncSort(v)
	return s
}

// SetActivityFuncFilter sets ActivityFunc to ActivityFuncFilter.
func (s *ActivityFunc) SetActivityFuncFilter(v ActivityFuncFilter) {
	s.Type = ActivityFuncFilterActivityFunc
	s.ActivityFuncFilter = v
}

// GetActivityFuncFilter returns ActivityFuncFilter and true boolean if ActivityFunc is ActivityFuncFilter.
func (s ActivityFunc) GetActivityFuncFilter() (v ActivityFuncFilter, ok bool) {
	if !s.IsActivityFuncFilter() {
		return v, false
	}
	return s.ActivityFuncFilter, true
}

// NewActivityFuncFilterActivityFunc returns new ActivityFunc from ActivityFuncFilter.
func NewActivityFuncFilterActivityFunc(v ActivityFuncFilter) ActivityFunc {
	var s ActivityFunc
	s.SetActivityFuncFilter(v)
	return s
}

// SetActivityFuncMap sets ActivityFunc to ActivityFuncMap.
func (s *ActivityFunc) SetActivityFuncMap(v ActivityFuncMap) {
	s.Type = ActivityFuncMapActivityFunc
	s.ActivityFuncMap = v
}

// GetActivityFuncMap returns ActivityFuncMap and true boolean if ActivityFunc is ActivityFuncMap.
func (s ActivityFunc) GetActivityFuncMap() (v ActivityFuncMap, ok bool) {
	if !s.IsActivityFuncMap() {
		return v, false
	}
	return s.ActivityFuncMap, true
}

// NewActivityFuncMapActivityFunc returns new ActivityFunc from ActivityFuncMap.
func NewActivityFuncMapActivityFunc(v ActivityFuncMap) ActivityFunc {
	var s ActivityFunc
	s.SetActivityFuncMap(v)
	return s
}

// Ref: #/components/schemas/ActivityFuncFilter
type ActivityFuncFilter struct {
	Kind ActivityFuncKind `json:"kind"`
	// Ключ значения в активности.
	Key string `json:"key"`
	// Операция сравнения.
	Op ActivityFuncFilterOp `json:"op"`
	// Значение, с которым выполняется сравнение.
	// > На данный момент поддерживается только числовое
	// значение.
	Value ActivityFuncFilterValue `json:"value"`
}

// GetKind returns the value of Kind.
func (s *ActivityFuncFilter) GetKind() ActivityFuncKind {
	return s.Kind
}

// GetKey returns the value of Key.
func (s *ActivityFuncFilter) GetKey() string {
	return s.Key
}

// GetOp returns the value of Op.
func (s *ActivityFuncFilter) GetOp() ActivityFuncFilterOp {
	return s.Op
}

// GetValue returns the value of Value.
func (s *ActivityFuncFilter) GetValue() ActivityFuncFilterValue {
	return s.Value
}

// SetKind sets the value of Kind.
func (s *ActivityFuncFilter) SetKind(val ActivityFuncKind) {
	s.Kind = val
}

// SetKey sets the value of Key.
func (s *ActivityFuncFilter) SetKey(val string) {
	s.Key = val
}

// SetOp sets the value of Op.
func (s *ActivityFuncFilter) SetOp(val ActivityFuncFilterOp) {
	s.Op = val
}

// SetValue sets the value of Value.
func (s *ActivityFuncFilter) SetValue(val ActivityFuncFilterValue) {
	s.Value = val
}

// Операция сравнения.
type ActivityFuncFilterOp string

const (
	ActivityFuncFilterOpLess      ActivityFuncFilterOp = "<"
	ActivityFuncFilterOpGreater   ActivityFuncFilterOp = ">"
	ActivityFuncFilterOpGreaterEq ActivityFuncFilterOp = ">="
	ActivityFuncFilterOpLessEq    ActivityFuncFilterOp = "<="
	ActivityFuncFilterOpEqEq      ActivityFuncFilterOp = "=="
	ActivityFuncFilterOpEq        ActivityFuncFilterOp = "!="
)

// AllValues returns all ActivityFuncFilterOp values.
func (ActivityFuncFilterOp) AllValues() []ActivityFuncFilterOp {
	return []ActivityFuncFilterOp{
		ActivityFuncFilterOpLess,
		ActivityFuncFilterOpGreater,
		ActivityFuncFilterOpGreaterEq,
		ActivityFuncFilterOpLessEq,
		ActivityFuncFilterOpEqEq,
		ActivityFuncFilterOpEq,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActivityFuncFilterOp) MarshalText() ([]byte, error) {
	switch s {
	case ActivityFuncFilterOpLess:
		return []byte(s), nil
	case ActivityFuncFilterOpGreater:
		return []byte(s), nil
	case ActivityFuncFilterOpGreaterEq:
		return []byte(s), nil
	case ActivityFuncFilterOpLessEq:
		return []byte(s), nil
	case ActivityFuncFilterOpEqEq:
		return []byte(s), nil
	case ActivityFuncFilterOpEq:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActivityFuncFilterOp) UnmarshalText(data []byte) error {
	switch ActivityFuncFilterOp(data) {
	case ActivityFuncFilterOpLess:
		*s = ActivityFuncFilterOpLess
		return nil
	case ActivityFuncFilterOpGreater:
		*s = ActivityFuncFilterOpGreater
		return nil
	case ActivityFuncFilterOpGreaterEq:
		*s = ActivityFuncFilterOpGreaterEq
		return nil
	case ActivityFuncFilterOpLessEq:
		*s = ActivityFuncFilterOpLessEq
		return nil
	case ActivityFuncFilterOpEqEq:
		*s = ActivityFuncFilterOpEqEq
		return nil
	case ActivityFuncFilterOpEq:
		*s = ActivityFuncFilterOpEq
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Значение, с которым выполняется сравнение.
// > На данный момент поддерживается только числовое
// значение.
// ActivityFuncFilterValue represents sum type.
type ActivityFuncFilterValue struct {
	Type    ActivityFuncFilterValueType // switch on this field
	Float64 float64
}

// ActivityFuncFilterValueType is oneOf type of ActivityFuncFilterValue.
type ActivityFuncFilterValueType string

// Possible values for ActivityFuncFilterValueType.
const (
	Float64ActivityFuncFilterValue ActivityFuncFilterValueType = "float64"
)

// IsFloat64 reports whether ActivityFuncFilterValue is float64.
func (s ActivityFuncFilterValue) IsFloat64() bool { return s.Type == Float64ActivityFuncFilterValue }

// SetFloat64 sets ActivityFuncFilterValue to float64.
func (s *ActivityFuncFilterValue) SetFloat64(v float64) {
	s.Type = Float64ActivityFuncFilterValue
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if ActivityFuncFilterValue is float64.
func (s ActivityFuncFilterValue) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64ActivityFuncFilterValue returns new ActivityFuncFilterValue from float64.
func NewFloat64ActivityFuncFilterValue(v float64) ActivityFuncFilterValue {
	var s ActivityFuncFilterValue
	s.SetFloat64(v)
	return s
}

type ActivityFuncKind string

// Ref: #/components/schemas/ActivityFuncMap
type ActivityFuncMap struct {
	Kind ActivityFuncKind `json:"kind"`
	// Ключ в который будет помещено значение возвращенное
	// формулой.
	Key string `json:"key"`
	// Формула вычисления значения.
	Formula string `json:"formula"`
}

// GetKind returns the value of Kind.
func (s *ActivityFuncMap) GetKind() ActivityFuncKind {
	return s.Kind
}

// GetKey returns the value of Key.
func (s *ActivityFuncMap) GetKey() string {
	return s.Key
}

// GetFormula returns the value of Formula.
func (s *ActivityFuncMap) GetFormula() string {
	return s.Formula
}

// SetKind sets the value of Kind.
func (s *ActivityFuncMap) SetKind(val ActivityFuncKind) {
	s.Kind = val
}

// SetKey sets the value of Key.
func (s *ActivityFuncMap) SetKey(val string) {
	s.Key = val
}

// SetFormula sets the value of Formula.
func (s *ActivityFuncMap) SetFormula(val string) {
	s.Formula = val
}

// Ref: #/components/schemas/ActivityFuncSlice
type ActivityFuncSlice struct {
	Kind ActivityFuncKind `json:"kind"`
	// Левая граница среза.
	Left OptInt32 `json:"left"`
	// Правая граница среза.
	Right int32 `json:"right"`
}

// GetKind returns the value of Kind.
func (s *ActivityFuncSlice) GetKind() ActivityFuncKind {
	return s.Kind
}

// GetLeft returns the value of Left.
func (s *ActivityFuncSlice) GetLeft() OptInt32 {
	return s.Left
}

// GetRight returns the value of Right.
func (s *ActivityFuncSlice) GetRight() int32 {
	return s.Right
}

// SetKind sets the value of Kind.
func (s *ActivityFuncSlice) SetKind(val ActivityFuncKind) {
	s.Kind = val
}

// SetLeft sets the value of Left.
func (s *ActivityFuncSlice) SetLeft(val OptInt32) {
	s.Left = val
}

// SetRight sets the value of Right.
func (s *ActivityFuncSlice) SetRight(val int32) {
	s.Right = val
}

// Ref: #/components/schemas/ActivityFuncSort
type ActivityFuncSort struct {
	Kind ActivityFuncKind `json:"kind"`
	// Ключ сортировки.
	Key string `json:"key"`
	// Порядок сортировки.
	Ordering ActivityFuncSortOrdering `json:"ordering"`
}

// GetKind returns the value of Kind.
func (s *ActivityFuncSort) GetKind() ActivityFuncKind {
	return s.Kind
}

// GetKey returns the value of Key.
func (s *ActivityFuncSort) GetKey() string {
	return s.Key
}

// GetOrdering returns the value of Ordering.
func (s *ActivityFuncSort) GetOrdering() ActivityFuncSortOrdering {
	return s.Ordering
}

// SetKind sets the value of Kind.
func (s *ActivityFuncSort) SetKind(val ActivityFuncKind) {
	s.Kind = val
}

// SetKey sets the value of Key.
func (s *ActivityFuncSort) SetKey(val string) {
	s.Key = val
}

// SetOrdering sets the value of Ordering.
func (s *ActivityFuncSort) SetOrdering(val ActivityFuncSortOrdering) {
	s.Ordering = val
}

// Порядок сортировки.
type ActivityFuncSortOrdering string

const (
	ActivityFuncSortOrderingAsc  ActivityFuncSortOrdering = "asc"
	ActivityFuncSortOrderingDesc ActivityFuncSortOrdering = "desc"
)

// AllValues returns all ActivityFuncSortOrdering values.
func (ActivityFuncSortOrdering) AllValues() []ActivityFuncSortOrdering {
	return []ActivityFuncSortOrdering{
		ActivityFuncSortOrderingAsc,
		ActivityFuncSortOrderingDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActivityFuncSortOrdering) MarshalText() ([]byte, error) {
	switch s {
	case ActivityFuncSortOrderingAsc:
		return []byte(s), nil
	case ActivityFuncSortOrderingDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActivityFuncSortOrdering) UnmarshalText(data []byte) error {
	switch ActivityFuncSortOrdering(data) {
	case ActivityFuncSortOrderingAsc:
		*s = ActivityFuncSortOrderingAsc
		return nil
	case ActivityFuncSortOrderingDesc:
		*s = ActivityFuncSortOrderingDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActivityFuncs []ActivityFunc

// Ref: #/components/schemas/AdminAccessRequired
type AdminAccessRequired struct {
	// Текстовое описание ошибки.
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *AdminAccessRequired) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *AdminAccessRequired) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*AdminAccessRequired) complexChallengeCreateRes()     {}
func (*AdminAccessRequired) complexChallengeGoalCreateRes() {}
func (*AdminAccessRequired) complexChallengeGoalDeleteRes() {}
func (*AdminAccessRequired) complexChallengeGoalReadRes()   {}
func (*AdminAccessRequired) complexChallengeGoalUpdateRes() {}
func (*AdminAccessRequired) complexChallengeGoalsListRes()  {}
func (*AdminAccessRequired) complexChallengePublicRes()     {}
func (*AdminAccessRequired) complexChallengeReadRes()       {}
func (*AdminAccessRequired) complexChallengeUpdateRes()     {}
func (*AdminAccessRequired) complexChallengeValidateRes()   {}
func (*AdminAccessRequired) instrumentCreateRes()           {}
func (*AdminAccessRequired) instrumentUpdateRes()           {}
func (*AdminAccessRequired) traditionCreateRes()            {}
func (*AdminAccessRequired) traditionUpdateRes()            {}

type ApplicationID uuid.UUID

// AwardsListOKHeaders wraps []AwardsListOKItem with response headers.
type AwardsListOKHeaders struct {
	XCount   int64
	Response []AwardsListOKItem
}

// GetXCount returns the value of XCount.
func (s *AwardsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *AwardsListOKHeaders) GetResponse() []AwardsListOKItem {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *AwardsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *AwardsListOKHeaders) SetResponse(val []AwardsListOKItem) {
	s.Response = val
}

// Merged schema.
type AwardsListOKItem struct {
	// Идентификатор награды.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt    time.Time       `json:"updated_at"`
	TraditionID  NilTraditionID  `json:"tradition_id"`
	InstrumentID NilInstrumentID `json:"instrument_id"`
	// Уровень традиции/инструмента ассоциированный с этой
	// наградой.
	AwardLevel int32 `json:"award_level"`
	// Опциональный уровень зависимой традиции/инструмента,
	//  без которого нельзя получить награду. При отсутствии
	// зависимости, содержит `0`.
	DependencyLevel int32 `json:"dependency_level"`
	// Кол-во баллов необходимое для достижения `award_level` и
	// получения этой награды.
	RequiredScores float64 `json:"required_scores"`
	// Название награды.
	Name string `json:"name"`
	// Описание награды.
	Description string `json:"description"`
	// URL иконки награды.
	IconURL string `json:"icon_url"`
	// Приложения, в которых реализована награда.
	// Возвращается только при указании параметра
	// `with_applications`.
	Applications []ApplicationID `json:"applications"`
}

// GetID returns the value of ID.
func (s *AwardsListOKItem) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AwardsListOKItem) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AwardsListOKItem) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetTraditionID returns the value of TraditionID.
func (s *AwardsListOKItem) GetTraditionID() NilTraditionID {
	return s.TraditionID
}

// GetInstrumentID returns the value of InstrumentID.
func (s *AwardsListOKItem) GetInstrumentID() NilInstrumentID {
	return s.InstrumentID
}

// GetAwardLevel returns the value of AwardLevel.
func (s *AwardsListOKItem) GetAwardLevel() int32 {
	return s.AwardLevel
}

// GetDependencyLevel returns the value of DependencyLevel.
func (s *AwardsListOKItem) GetDependencyLevel() int32 {
	return s.DependencyLevel
}

// GetRequiredScores returns the value of RequiredScores.
func (s *AwardsListOKItem) GetRequiredScores() float64 {
	return s.RequiredScores
}

// GetName returns the value of Name.
func (s *AwardsListOKItem) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AwardsListOKItem) GetDescription() string {
	return s.Description
}

// GetIconURL returns the value of IconURL.
func (s *AwardsListOKItem) GetIconURL() string {
	return s.IconURL
}

// GetApplications returns the value of Applications.
func (s *AwardsListOKItem) GetApplications() []ApplicationID {
	return s.Applications
}

// SetID sets the value of ID.
func (s *AwardsListOKItem) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AwardsListOKItem) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AwardsListOKItem) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetTraditionID sets the value of TraditionID.
func (s *AwardsListOKItem) SetTraditionID(val NilTraditionID) {
	s.TraditionID = val
}

// SetInstrumentID sets the value of InstrumentID.
func (s *AwardsListOKItem) SetInstrumentID(val NilInstrumentID) {
	s.InstrumentID = val
}

// SetAwardLevel sets the value of AwardLevel.
func (s *AwardsListOKItem) SetAwardLevel(val int32) {
	s.AwardLevel = val
}

// SetDependencyLevel sets the value of DependencyLevel.
func (s *AwardsListOKItem) SetDependencyLevel(val int32) {
	s.DependencyLevel = val
}

// SetRequiredScores sets the value of RequiredScores.
func (s *AwardsListOKItem) SetRequiredScores(val float64) {
	s.RequiredScores = val
}

// SetName sets the value of Name.
func (s *AwardsListOKItem) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AwardsListOKItem) SetDescription(val string) {
	s.Description = val
}

// SetIconURL sets the value of IconURL.
func (s *AwardsListOKItem) SetIconURL(val string) {
	s.IconURL = val
}

// SetApplications sets the value of Applications.
func (s *AwardsListOKItem) SetApplications(val []ApplicationID) {
	s.Applications = val
}

type AwardsListOrderBy string

const (
	AwardsListOrderByAwardLevel    AwardsListOrderBy = "award_level"
	AwardsListOrderByCreatedAtDesc AwardsListOrderBy = "created_at_desc"
	AwardsListOrderByCreatedAtAsc  AwardsListOrderBy = "created_at_asc"
	AwardsListOrderByUpdatedAtDesc AwardsListOrderBy = "updated_at_desc"
	AwardsListOrderByUpdatedAtAsc  AwardsListOrderBy = "updated_at_asc"
	AwardsListOrderByTraditionID   AwardsListOrderBy = "tradition_id"
	AwardsListOrderByInstrumentID  AwardsListOrderBy = "instrument_id"
)

// AllValues returns all AwardsListOrderBy values.
func (AwardsListOrderBy) AllValues() []AwardsListOrderBy {
	return []AwardsListOrderBy{
		AwardsListOrderByAwardLevel,
		AwardsListOrderByCreatedAtDesc,
		AwardsListOrderByCreatedAtAsc,
		AwardsListOrderByUpdatedAtDesc,
		AwardsListOrderByUpdatedAtAsc,
		AwardsListOrderByTraditionID,
		AwardsListOrderByInstrumentID,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AwardsListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case AwardsListOrderByAwardLevel:
		return []byte(s), nil
	case AwardsListOrderByCreatedAtDesc:
		return []byte(s), nil
	case AwardsListOrderByCreatedAtAsc:
		return []byte(s), nil
	case AwardsListOrderByUpdatedAtDesc:
		return []byte(s), nil
	case AwardsListOrderByUpdatedAtAsc:
		return []byte(s), nil
	case AwardsListOrderByTraditionID:
		return []byte(s), nil
	case AwardsListOrderByInstrumentID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AwardsListOrderBy) UnmarshalText(data []byte) error {
	switch AwardsListOrderBy(data) {
	case AwardsListOrderByAwardLevel:
		*s = AwardsListOrderByAwardLevel
		return nil
	case AwardsListOrderByCreatedAtDesc:
		*s = AwardsListOrderByCreatedAtDesc
		return nil
	case AwardsListOrderByCreatedAtAsc:
		*s = AwardsListOrderByCreatedAtAsc
		return nil
	case AwardsListOrderByUpdatedAtDesc:
		*s = AwardsListOrderByUpdatedAtDesc
		return nil
	case AwardsListOrderByUpdatedAtAsc:
		*s = AwardsListOrderByUpdatedAtAsc
		return nil
	case AwardsListOrderByTraditionID:
		*s = AwardsListOrderByTraditionID
		return nil
	case AwardsListOrderByInstrumentID:
		*s = AwardsListOrderByInstrumentID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BerlogaJWT struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *BerlogaJWT) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *BerlogaJWT) SetAPIKey(val string) {
	s.APIKey = val
}

// ChallengesListOKHeaders wraps []ChallengesListOKItem with response headers.
type ChallengesListOKHeaders struct {
	XCount   int64
	Response []ChallengesListOKItem
}

// GetXCount returns the value of XCount.
func (s *ChallengesListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *ChallengesListOKHeaders) GetResponse() []ChallengesListOKItem {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *ChallengesListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *ChallengesListOKHeaders) SetResponse(val []ChallengesListOKItem) {
	s.Response = val
}

type ChallengesListOKItem struct {
	ID          int32  `json:"id"`
	Description string `json:"description"`
	// URL иконки-изображения испытания.
	IconURL string `json:"icon_url"`
	// Приложения, активности из которых участвуют в
	// испытании.
	Applications []ApplicationID `json:"applications"`
}

// GetID returns the value of ID.
func (s *ChallengesListOKItem) GetID() int32 {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *ChallengesListOKItem) GetDescription() string {
	return s.Description
}

// GetIconURL returns the value of IconURL.
func (s *ChallengesListOKItem) GetIconURL() string {
	return s.IconURL
}

// GetApplications returns the value of Applications.
func (s *ChallengesListOKItem) GetApplications() []ApplicationID {
	return s.Applications
}

// SetID sets the value of ID.
func (s *ChallengesListOKItem) SetID(val int32) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *ChallengesListOKItem) SetDescription(val string) {
	s.Description = val
}

// SetIconURL sets the value of IconURL.
func (s *ChallengesListOKItem) SetIconURL(val string) {
	s.IconURL = val
}

// SetApplications sets the value of Applications.
func (s *ChallengesListOKItem) SetApplications(val []ApplicationID) {
	s.Applications = val
}

// Merged schema.
// Ref: #/components/schemas/ComplexChallenge
type ComplexChallenge struct {
	// ID испытания.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Статус публичности испытания.
	Public         bool                           `json:"public"`
	UpdateStrategy ComplexChallengeUpdateStrategy `json:"update_strategy"`
	// Название испытания.
	Name string `json:"name"`
	// Начало периода допускаемых в испытании активностей.
	PeriodFrom NilDateTime `json:"period_from"`
	// Завершение периода допускаемых в испытании
	// активностей.
	PeriodTo NilDateTime `json:"period_to"`
	// Формула вычисления балла.
	ScoreFormula string `json:"score_formula"`
	// Проходной балл.
	RequiredScore float64 `json:"required_score"`
}

// GetID returns the value of ID.
func (s *ComplexChallenge) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ComplexChallenge) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ComplexChallenge) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPublic returns the value of Public.
func (s *ComplexChallenge) GetPublic() bool {
	return s.Public
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *ComplexChallenge) GetUpdateStrategy() ComplexChallengeUpdateStrategy {
	return s.UpdateStrategy
}

// GetName returns the value of Name.
func (s *ComplexChallenge) GetName() string {
	return s.Name
}

// GetPeriodFrom returns the value of PeriodFrom.
func (s *ComplexChallenge) GetPeriodFrom() NilDateTime {
	return s.PeriodFrom
}

// GetPeriodTo returns the value of PeriodTo.
func (s *ComplexChallenge) GetPeriodTo() NilDateTime {
	return s.PeriodTo
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallenge) GetScoreFormula() string {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallenge) GetRequiredScore() float64 {
	return s.RequiredScore
}

// SetID sets the value of ID.
func (s *ComplexChallenge) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ComplexChallenge) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ComplexChallenge) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPublic sets the value of Public.
func (s *ComplexChallenge) SetPublic(val bool) {
	s.Public = val
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *ComplexChallenge) SetUpdateStrategy(val ComplexChallengeUpdateStrategy) {
	s.UpdateStrategy = val
}

// SetName sets the value of Name.
func (s *ComplexChallenge) SetName(val string) {
	s.Name = val
}

// SetPeriodFrom sets the value of PeriodFrom.
func (s *ComplexChallenge) SetPeriodFrom(val NilDateTime) {
	s.PeriodFrom = val
}

// SetPeriodTo sets the value of PeriodTo.
func (s *ComplexChallenge) SetPeriodTo(val NilDateTime) {
	s.PeriodTo = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallenge) SetScoreFormula(val string) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallenge) SetRequiredScore(val float64) {
	s.RequiredScore = val
}

func (*ComplexChallenge) complexChallengePublicRes() {}
func (*ComplexChallenge) complexChallengeUpdateRes() {}

// Merged schema.
// Ref: #/components/schemas/ComplexChallengeBase
type ComplexChallengeBase struct {
	// ID испытания.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Статус публичности испытания.
	Public         bool                           `json:"public"`
	UpdateStrategy ComplexChallengeUpdateStrategy `json:"update_strategy"`
	// Название испытания.
	Name string `json:"name"`
	// Начало периода допускаемых в испытании активностей.
	PeriodFrom NilDateTime `json:"period_from"`
	// Завершение периода допускаемых в испытании
	// активностей.
	PeriodTo NilDateTime `json:"period_to"`
}

// GetID returns the value of ID.
func (s *ComplexChallengeBase) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ComplexChallengeBase) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ComplexChallengeBase) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPublic returns the value of Public.
func (s *ComplexChallengeBase) GetPublic() bool {
	return s.Public
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *ComplexChallengeBase) GetUpdateStrategy() ComplexChallengeUpdateStrategy {
	return s.UpdateStrategy
}

// GetName returns the value of Name.
func (s *ComplexChallengeBase) GetName() string {
	return s.Name
}

// GetPeriodFrom returns the value of PeriodFrom.
func (s *ComplexChallengeBase) GetPeriodFrom() NilDateTime {
	return s.PeriodFrom
}

// GetPeriodTo returns the value of PeriodTo.
func (s *ComplexChallengeBase) GetPeriodTo() NilDateTime {
	return s.PeriodTo
}

// SetID sets the value of ID.
func (s *ComplexChallengeBase) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ComplexChallengeBase) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ComplexChallengeBase) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPublic sets the value of Public.
func (s *ComplexChallengeBase) SetPublic(val bool) {
	s.Public = val
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *ComplexChallengeBase) SetUpdateStrategy(val ComplexChallengeUpdateStrategy) {
	s.UpdateStrategy = val
}

// SetName sets the value of Name.
func (s *ComplexChallengeBase) SetName(val string) {
	s.Name = val
}

// SetPeriodFrom sets the value of PeriodFrom.
func (s *ComplexChallengeBase) SetPeriodFrom(val NilDateTime) {
	s.PeriodFrom = val
}

// SetPeriodTo sets the value of PeriodTo.
func (s *ComplexChallengeBase) SetPeriodTo(val NilDateTime) {
	s.PeriodTo = val
}

func (*ComplexChallengeBase) complexChallengeCreateRes() {}

type ComplexChallengeCreateReq struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ComplexChallengeCreateReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ComplexChallengeCreateReq) SetName(val string) {
	s.Name = val
}

// Merged schema.
// Ref: #/components/schemas/ComplexChallengeGoal
type ComplexChallengeGoal struct {
	// ID цели.
	ID int32 `json:"id"`
	// ID испытания.
	ComplexchID int32 `json:"complexch_id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Название цели.
	Name string `json:"name"`
	// Формула вычисления балла.
	ScoreFormula string `json:"score_formula"`
	// Проходной балл для выполнения цели.
	RequiredScore float64 `json:"required_score"`
	// Имя переменной для использования балла в итоговой
	// формуле испытания.
	VariableName string `json:"variable_name"`
	// Фильтрация активностей по идентификаторам
	// контекстов.
	ContextIds []uuid.UUID `json:"context_ids"`
	// Фильтр по контекстам имеющим указанные значения
	// свойств.
	// Формат записи значения: `ключ+значение`.
	// В качестве значения можно указать несколько
	// вариантов разделенных вертикальной чертой.
	// Пример фильтра по свойству `instrument` с 3 допустимыми
	// вариантами: `instrument+piano|guitar|drums`.
	ContextProperties []string `json:"context_properties"`
	// ID приложения для фильтрации контекстов.
	ApplicationID OptNilUUID `json:"application_id"`
	// Максимальное кол-во активностей для использования в
	// вычислениях.
	ActivityLimit OptNilInt32   `json:"activity_limit"`
	ActivityFuncs ActivityFuncs `json:"activity_funcs"`
}

// GetID returns the value of ID.
func (s *ComplexChallengeGoal) GetID() int32 {
	return s.ID
}

// GetComplexchID returns the value of ComplexchID.
func (s *ComplexChallengeGoal) GetComplexchID() int32 {
	return s.ComplexchID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ComplexChallengeGoal) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ComplexChallengeGoal) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ComplexChallengeGoal) GetName() string {
	return s.Name
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallengeGoal) GetScoreFormula() string {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallengeGoal) GetRequiredScore() float64 {
	return s.RequiredScore
}

// GetVariableName returns the value of VariableName.
func (s *ComplexChallengeGoal) GetVariableName() string {
	return s.VariableName
}

// GetContextIds returns the value of ContextIds.
func (s *ComplexChallengeGoal) GetContextIds() []uuid.UUID {
	return s.ContextIds
}

// GetContextProperties returns the value of ContextProperties.
func (s *ComplexChallengeGoal) GetContextProperties() []string {
	return s.ContextProperties
}

// GetApplicationID returns the value of ApplicationID.
func (s *ComplexChallengeGoal) GetApplicationID() OptNilUUID {
	return s.ApplicationID
}

// GetActivityLimit returns the value of ActivityLimit.
func (s *ComplexChallengeGoal) GetActivityLimit() OptNilInt32 {
	return s.ActivityLimit
}

// GetActivityFuncs returns the value of ActivityFuncs.
func (s *ComplexChallengeGoal) GetActivityFuncs() ActivityFuncs {
	return s.ActivityFuncs
}

// SetID sets the value of ID.
func (s *ComplexChallengeGoal) SetID(val int32) {
	s.ID = val
}

// SetComplexchID sets the value of ComplexchID.
func (s *ComplexChallengeGoal) SetComplexchID(val int32) {
	s.ComplexchID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ComplexChallengeGoal) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ComplexChallengeGoal) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ComplexChallengeGoal) SetName(val string) {
	s.Name = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallengeGoal) SetScoreFormula(val string) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallengeGoal) SetRequiredScore(val float64) {
	s.RequiredScore = val
}

// SetVariableName sets the value of VariableName.
func (s *ComplexChallengeGoal) SetVariableName(val string) {
	s.VariableName = val
}

// SetContextIds sets the value of ContextIds.
func (s *ComplexChallengeGoal) SetContextIds(val []uuid.UUID) {
	s.ContextIds = val
}

// SetContextProperties sets the value of ContextProperties.
func (s *ComplexChallengeGoal) SetContextProperties(val []string) {
	s.ContextProperties = val
}

// SetApplicationID sets the value of ApplicationID.
func (s *ComplexChallengeGoal) SetApplicationID(val OptNilUUID) {
	s.ApplicationID = val
}

// SetActivityLimit sets the value of ActivityLimit.
func (s *ComplexChallengeGoal) SetActivityLimit(val OptNilInt32) {
	s.ActivityLimit = val
}

// SetActivityFuncs sets the value of ActivityFuncs.
func (s *ComplexChallengeGoal) SetActivityFuncs(val ActivityFuncs) {
	s.ActivityFuncs = val
}

func (*ComplexChallengeGoal) complexChallengeGoalCreateRes() {}
func (*ComplexChallengeGoal) complexChallengeGoalReadRes()   {}
func (*ComplexChallengeGoal) complexChallengeGoalUpdateRes() {}

// Merged schema.
type ComplexChallengeGoalCreateReq struct {
	// Название цели.
	Name string `json:"name"`
	// Формула вычисления балла.
	ScoreFormula OptString `json:"score_formula"`
	// Проходной балл для выполнения цели.
	RequiredScore OptFloat64 `json:"required_score"`
	// Имя переменной для использования балла в итоговой
	// формуле испытания.
	VariableName OptString `json:"variable_name"`
	// Фильтрация активностей по идентификаторам
	// контекстов.
	ContextIds []uuid.UUID `json:"context_ids"`
	// Фильтр по контекстам имеющим указанные значения
	// свойств.
	// Формат записи значения: `ключ+значение`.
	// В качестве значения можно указать несколько
	// вариантов разделенных вертикальной чертой.
	// Пример фильтра по свойству `instrument` с 3 допустимыми
	// вариантами: `instrument+piano|guitar|drums`.
	ContextProperties []string `json:"context_properties"`
	// ID приложения для фильтрации контекстов.
	ApplicationID OptNilUUID `json:"application_id"`
	// Максимальное кол-во активностей для использования в
	// вычислениях.
	ActivityLimit OptNilInt32   `json:"activity_limit"`
	ActivityFuncs ActivityFuncs `json:"activity_funcs"`
}

// GetName returns the value of Name.
func (s *ComplexChallengeGoalCreateReq) GetName() string {
	return s.Name
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallengeGoalCreateReq) GetScoreFormula() OptString {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallengeGoalCreateReq) GetRequiredScore() OptFloat64 {
	return s.RequiredScore
}

// GetVariableName returns the value of VariableName.
func (s *ComplexChallengeGoalCreateReq) GetVariableName() OptString {
	return s.VariableName
}

// GetContextIds returns the value of ContextIds.
func (s *ComplexChallengeGoalCreateReq) GetContextIds() []uuid.UUID {
	return s.ContextIds
}

// GetContextProperties returns the value of ContextProperties.
func (s *ComplexChallengeGoalCreateReq) GetContextProperties() []string {
	return s.ContextProperties
}

// GetApplicationID returns the value of ApplicationID.
func (s *ComplexChallengeGoalCreateReq) GetApplicationID() OptNilUUID {
	return s.ApplicationID
}

// GetActivityLimit returns the value of ActivityLimit.
func (s *ComplexChallengeGoalCreateReq) GetActivityLimit() OptNilInt32 {
	return s.ActivityLimit
}

// GetActivityFuncs returns the value of ActivityFuncs.
func (s *ComplexChallengeGoalCreateReq) GetActivityFuncs() ActivityFuncs {
	return s.ActivityFuncs
}

// SetName sets the value of Name.
func (s *ComplexChallengeGoalCreateReq) SetName(val string) {
	s.Name = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallengeGoalCreateReq) SetScoreFormula(val OptString) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallengeGoalCreateReq) SetRequiredScore(val OptFloat64) {
	s.RequiredScore = val
}

// SetVariableName sets the value of VariableName.
func (s *ComplexChallengeGoalCreateReq) SetVariableName(val OptString) {
	s.VariableName = val
}

// SetContextIds sets the value of ContextIds.
func (s *ComplexChallengeGoalCreateReq) SetContextIds(val []uuid.UUID) {
	s.ContextIds = val
}

// SetContextProperties sets the value of ContextProperties.
func (s *ComplexChallengeGoalCreateReq) SetContextProperties(val []string) {
	s.ContextProperties = val
}

// SetApplicationID sets the value of ApplicationID.
func (s *ComplexChallengeGoalCreateReq) SetApplicationID(val OptNilUUID) {
	s.ApplicationID = val
}

// SetActivityLimit sets the value of ActivityLimit.
func (s *ComplexChallengeGoalCreateReq) SetActivityLimit(val OptNilInt32) {
	s.ActivityLimit = val
}

// SetActivityFuncs sets the value of ActivityFuncs.
func (s *ComplexChallengeGoalCreateReq) SetActivityFuncs(val ActivityFuncs) {
	s.ActivityFuncs = val
}

// ComplexChallengeGoalDeleteNoContent is response for ComplexChallengeGoalDelete operation.
type ComplexChallengeGoalDeleteNoContent struct{}

func (*ComplexChallengeGoalDeleteNoContent) complexChallengeGoalDeleteRes() {}

// Ref: #/components/schemas/ComplexChallengeGoalFields
type ComplexChallengeGoalFields struct {
	// Название цели.
	Name OptString `json:"name"`
	// Формула вычисления балла.
	ScoreFormula OptString `json:"score_formula"`
	// Проходной балл для выполнения цели.
	RequiredScore OptFloat64 `json:"required_score"`
	// Имя переменной для использования балла в итоговой
	// формуле испытания.
	VariableName OptString `json:"variable_name"`
	// Фильтрация активностей по идентификаторам
	// контекстов.
	ContextIds []uuid.UUID `json:"context_ids"`
	// Фильтр по контекстам имеющим указанные значения
	// свойств.
	// Формат записи значения: `ключ+значение`.
	// В качестве значения можно указать несколько
	// вариантов разделенных вертикальной чертой.
	// Пример фильтра по свойству `instrument` с 3 допустимыми
	// вариантами: `instrument+piano|guitar|drums`.
	ContextProperties []string `json:"context_properties"`
	// ID приложения для фильтрации контекстов.
	ApplicationID OptNilUUID `json:"application_id"`
	// Максимальное кол-во активностей для использования в
	// вычислениях.
	ActivityLimit OptNilInt32   `json:"activity_limit"`
	ActivityFuncs ActivityFuncs `json:"activity_funcs"`
}

// GetName returns the value of Name.
func (s *ComplexChallengeGoalFields) GetName() OptString {
	return s.Name
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallengeGoalFields) GetScoreFormula() OptString {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallengeGoalFields) GetRequiredScore() OptFloat64 {
	return s.RequiredScore
}

// GetVariableName returns the value of VariableName.
func (s *ComplexChallengeGoalFields) GetVariableName() OptString {
	return s.VariableName
}

// GetContextIds returns the value of ContextIds.
func (s *ComplexChallengeGoalFields) GetContextIds() []uuid.UUID {
	return s.ContextIds
}

// GetContextProperties returns the value of ContextProperties.
func (s *ComplexChallengeGoalFields) GetContextProperties() []string {
	return s.ContextProperties
}

// GetApplicationID returns the value of ApplicationID.
func (s *ComplexChallengeGoalFields) GetApplicationID() OptNilUUID {
	return s.ApplicationID
}

// GetActivityLimit returns the value of ActivityLimit.
func (s *ComplexChallengeGoalFields) GetActivityLimit() OptNilInt32 {
	return s.ActivityLimit
}

// GetActivityFuncs returns the value of ActivityFuncs.
func (s *ComplexChallengeGoalFields) GetActivityFuncs() ActivityFuncs {
	return s.ActivityFuncs
}

// SetName sets the value of Name.
func (s *ComplexChallengeGoalFields) SetName(val OptString) {
	s.Name = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallengeGoalFields) SetScoreFormula(val OptString) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallengeGoalFields) SetRequiredScore(val OptFloat64) {
	s.RequiredScore = val
}

// SetVariableName sets the value of VariableName.
func (s *ComplexChallengeGoalFields) SetVariableName(val OptString) {
	s.VariableName = val
}

// SetContextIds sets the value of ContextIds.
func (s *ComplexChallengeGoalFields) SetContextIds(val []uuid.UUID) {
	s.ContextIds = val
}

// SetContextProperties sets the value of ContextProperties.
func (s *ComplexChallengeGoalFields) SetContextProperties(val []string) {
	s.ContextProperties = val
}

// SetApplicationID sets the value of ApplicationID.
func (s *ComplexChallengeGoalFields) SetApplicationID(val OptNilUUID) {
	s.ApplicationID = val
}

// SetActivityLimit sets the value of ActivityLimit.
func (s *ComplexChallengeGoalFields) SetActivityLimit(val OptNilInt32) {
	s.ActivityLimit = val
}

// SetActivityFuncs sets the value of ActivityFuncs.
func (s *ComplexChallengeGoalFields) SetActivityFuncs(val ActivityFuncs) {
	s.ActivityFuncs = val
}

// ComplexChallengeGoalsListOKHeaders wraps []ComplexChallengeGoal with response headers.
type ComplexChallengeGoalsListOKHeaders struct {
	XCount   int64
	Response []ComplexChallengeGoal
}

// GetXCount returns the value of XCount.
func (s *ComplexChallengeGoalsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *ComplexChallengeGoalsListOKHeaders) GetResponse() []ComplexChallengeGoal {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *ComplexChallengeGoalsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *ComplexChallengeGoalsListOKHeaders) SetResponse(val []ComplexChallengeGoal) {
	s.Response = val
}

func (*ComplexChallengeGoalsListOKHeaders) complexChallengeGoalsListRes() {}

// ComplexChallengePublicNoContent is response for ComplexChallengePublic operation.
type ComplexChallengePublicNoContent struct{}

func (*ComplexChallengePublicNoContent) complexChallengePublicRes() {}

// Merged schema.
// Ref: #/components/schemas/ComplexChallengeRead
type ComplexChallengeRead struct {
	// ID испытания.
	ID int32 `json:"id"`
	// Дата создания.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления.
	UpdatedAt time.Time `json:"updated_at"`
	// Статус публичности испытания.
	Public         bool                           `json:"public"`
	UpdateStrategy ComplexChallengeUpdateStrategy `json:"update_strategy"`
	// Название испытания.
	Name string `json:"name"`
	// Начало периода допускаемых в испытании активностей.
	PeriodFrom NilDateTime `json:"period_from"`
	// Завершение периода допускаемых в испытании
	// активностей.
	PeriodTo     NilDateTime `json:"period_to"`
	ScoreFormula OptString   `json:"score_formula"`
	// Проходной балл.
	RequiredScore OptFloat64             `json:"required_score"`
	Goals         []ComplexChallengeGoal `json:"goals"`
}

// GetID returns the value of ID.
func (s *ComplexChallengeRead) GetID() int32 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ComplexChallengeRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ComplexChallengeRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPublic returns the value of Public.
func (s *ComplexChallengeRead) GetPublic() bool {
	return s.Public
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *ComplexChallengeRead) GetUpdateStrategy() ComplexChallengeUpdateStrategy {
	return s.UpdateStrategy
}

// GetName returns the value of Name.
func (s *ComplexChallengeRead) GetName() string {
	return s.Name
}

// GetPeriodFrom returns the value of PeriodFrom.
func (s *ComplexChallengeRead) GetPeriodFrom() NilDateTime {
	return s.PeriodFrom
}

// GetPeriodTo returns the value of PeriodTo.
func (s *ComplexChallengeRead) GetPeriodTo() NilDateTime {
	return s.PeriodTo
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallengeRead) GetScoreFormula() OptString {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallengeRead) GetRequiredScore() OptFloat64 {
	return s.RequiredScore
}

// GetGoals returns the value of Goals.
func (s *ComplexChallengeRead) GetGoals() []ComplexChallengeGoal {
	return s.Goals
}

// SetID sets the value of ID.
func (s *ComplexChallengeRead) SetID(val int32) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ComplexChallengeRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ComplexChallengeRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPublic sets the value of Public.
func (s *ComplexChallengeRead) SetPublic(val bool) {
	s.Public = val
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *ComplexChallengeRead) SetUpdateStrategy(val ComplexChallengeUpdateStrategy) {
	s.UpdateStrategy = val
}

// SetName sets the value of Name.
func (s *ComplexChallengeRead) SetName(val string) {
	s.Name = val
}

// SetPeriodFrom sets the value of PeriodFrom.
func (s *ComplexChallengeRead) SetPeriodFrom(val NilDateTime) {
	s.PeriodFrom = val
}

// SetPeriodTo sets the value of PeriodTo.
func (s *ComplexChallengeRead) SetPeriodTo(val NilDateTime) {
	s.PeriodTo = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallengeRead) SetScoreFormula(val OptString) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallengeRead) SetRequiredScore(val OptFloat64) {
	s.RequiredScore = val
}

// SetGoals sets the value of Goals.
func (s *ComplexChallengeRead) SetGoals(val []ComplexChallengeGoal) {
	s.Goals = val
}

func (*ComplexChallengeRead) complexChallengeReadRes() {}

// Ref: #/components/schemas/ComplexChallengeResult
type ComplexChallengeResult struct {
	ID          int64      `json:"id"`
	UserID      int32      `json:"user_id"`
	ComplexchID int32      `json:"complexch_id"`
	Passed      bool       `json:"passed"`
	PassedWas   bool       `json:"passed_was"`
	Score       NilFloat64 `json:"score"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *ComplexChallengeResult) GetID() int64 {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *ComplexChallengeResult) GetUserID() int32 {
	return s.UserID
}

// GetComplexchID returns the value of ComplexchID.
func (s *ComplexChallengeResult) GetComplexchID() int32 {
	return s.ComplexchID
}

// GetPassed returns the value of Passed.
func (s *ComplexChallengeResult) GetPassed() bool {
	return s.Passed
}

// GetPassedWas returns the value of PassedWas.
func (s *ComplexChallengeResult) GetPassedWas() bool {
	return s.PassedWas
}

// GetScore returns the value of Score.
func (s *ComplexChallengeResult) GetScore() NilFloat64 {
	return s.Score
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ComplexChallengeResult) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ComplexChallengeResult) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *ComplexChallengeResult) SetID(val int64) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *ComplexChallengeResult) SetUserID(val int32) {
	s.UserID = val
}

// SetComplexchID sets the value of ComplexchID.
func (s *ComplexChallengeResult) SetComplexchID(val int32) {
	s.ComplexchID = val
}

// SetPassed sets the value of Passed.
func (s *ComplexChallengeResult) SetPassed(val bool) {
	s.Passed = val
}

// SetPassedWas sets the value of PassedWas.
func (s *ComplexChallengeResult) SetPassedWas(val bool) {
	s.PassedWas = val
}

// SetScore sets the value of Score.
func (s *ComplexChallengeResult) SetScore(val NilFloat64) {
	s.Score = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ComplexChallengeResult) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ComplexChallengeResult) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Merged schema.
type ComplexChallengeUpdateReq struct {
	UpdateStrategy OptComplexChallengeUpdateStrategy `json:"update_strategy"`
	// Название испытания.
	Name OptString `json:"name"`
	// Начало периода допускаемых в испытании активностей.
	PeriodFrom OptNilDateTime `json:"period_from"`
	// Завершение периода допускаемых в испытании
	// активностей.
	PeriodTo OptNilDateTime `json:"period_to"`
	// Формула вычисления балла.
	ScoreFormula OptString `json:"score_formula"`
	// Проходной балл.
	RequiredScore OptFloat64 `json:"required_score"`
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *ComplexChallengeUpdateReq) GetUpdateStrategy() OptComplexChallengeUpdateStrategy {
	return s.UpdateStrategy
}

// GetName returns the value of Name.
func (s *ComplexChallengeUpdateReq) GetName() OptString {
	return s.Name
}

// GetPeriodFrom returns the value of PeriodFrom.
func (s *ComplexChallengeUpdateReq) GetPeriodFrom() OptNilDateTime {
	return s.PeriodFrom
}

// GetPeriodTo returns the value of PeriodTo.
func (s *ComplexChallengeUpdateReq) GetPeriodTo() OptNilDateTime {
	return s.PeriodTo
}

// GetScoreFormula returns the value of ScoreFormula.
func (s *ComplexChallengeUpdateReq) GetScoreFormula() OptString {
	return s.ScoreFormula
}

// GetRequiredScore returns the value of RequiredScore.
func (s *ComplexChallengeUpdateReq) GetRequiredScore() OptFloat64 {
	return s.RequiredScore
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *ComplexChallengeUpdateReq) SetUpdateStrategy(val OptComplexChallengeUpdateStrategy) {
	s.UpdateStrategy = val
}

// SetName sets the value of Name.
func (s *ComplexChallengeUpdateReq) SetName(val OptString) {
	s.Name = val
}

// SetPeriodFrom sets the value of PeriodFrom.
func (s *ComplexChallengeUpdateReq) SetPeriodFrom(val OptNilDateTime) {
	s.PeriodFrom = val
}

// SetPeriodTo sets the value of PeriodTo.
func (s *ComplexChallengeUpdateReq) SetPeriodTo(val OptNilDateTime) {
	s.PeriodTo = val
}

// SetScoreFormula sets the value of ScoreFormula.
func (s *ComplexChallengeUpdateReq) SetScoreFormula(val OptString) {
	s.ScoreFormula = val
}

// SetRequiredScore sets the value of RequiredScore.
func (s *ComplexChallengeUpdateReq) SetRequiredScore(val OptFloat64) {
	s.RequiredScore = val
}

// Ref: #/components/schemas/ComplexChallengeUpdateStrategy
type ComplexChallengeUpdateStrategy string

const (
	ComplexChallengeUpdateStrategyInitial  ComplexChallengeUpdateStrategy = "initial"
	ComplexChallengeUpdateStrategyIncrease ComplexChallengeUpdateStrategy = "increase"
)

// AllValues returns all ComplexChallengeUpdateStrategy values.
func (ComplexChallengeUpdateStrategy) AllValues() []ComplexChallengeUpdateStrategy {
	return []ComplexChallengeUpdateStrategy{
		ComplexChallengeUpdateStrategyInitial,
		ComplexChallengeUpdateStrategyIncrease,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ComplexChallengeUpdateStrategy) MarshalText() ([]byte, error) {
	switch s {
	case ComplexChallengeUpdateStrategyInitial:
		return []byte(s), nil
	case ComplexChallengeUpdateStrategyIncrease:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ComplexChallengeUpdateStrategy) UnmarshalText(data []byte) error {
	switch ComplexChallengeUpdateStrategy(data) {
	case ComplexChallengeUpdateStrategyInitial:
		*s = ComplexChallengeUpdateStrategyInitial
		return nil
	case ComplexChallengeUpdateStrategyIncrease:
		*s = ComplexChallengeUpdateStrategyIncrease
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ComplexChallengeValidateNoContent is response for ComplexChallengeValidate operation.
type ComplexChallengeValidateNoContent struct{}

func (*ComplexChallengeValidateNoContent) complexChallengeValidateRes() {}

// ComplexChallengesListOKHeaders wraps []ComplexChallengeBase with response headers.
type ComplexChallengesListOKHeaders struct {
	XCount   int64
	Response []ComplexChallengeBase
}

// GetXCount returns the value of XCount.
func (s *ComplexChallengesListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *ComplexChallengesListOKHeaders) GetResponse() []ComplexChallengeBase {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *ComplexChallengesListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *ComplexChallengesListOKHeaders) SetResponse(val []ComplexChallengeBase) {
	s.Response = val
}

// ComplexChallengesResultsListOKHeaders wraps []ComplexChallengeResult with response headers.
type ComplexChallengesResultsListOKHeaders struct {
	XCount   int64
	Response []ComplexChallengeResult
}

// GetXCount returns the value of XCount.
func (s *ComplexChallengesResultsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *ComplexChallengesResultsListOKHeaders) GetResponse() []ComplexChallengeResult {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *ComplexChallengesResultsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *ComplexChallengesResultsListOKHeaders) SetResponse(val []ComplexChallengeResult) {
	s.Response = val
}

type ComplexChallengesResultsListOrderBy string

const (
	ComplexChallengesResultsListOrderByIDAsc           ComplexChallengesResultsListOrderBy = "id_asc"
	ComplexChallengesResultsListOrderByIDDesc          ComplexChallengesResultsListOrderBy = "id_desc"
	ComplexChallengesResultsListOrderByUserIDAsc       ComplexChallengesResultsListOrderBy = "user_id_asc"
	ComplexChallengesResultsListOrderByUserIDDesc      ComplexChallengesResultsListOrderBy = "user_id_desc"
	ComplexChallengesResultsListOrderByComplexchIDAsc  ComplexChallengesResultsListOrderBy = "complexch_id_asc"
	ComplexChallengesResultsListOrderByComplexchIDDesc ComplexChallengesResultsListOrderBy = "complexch_id_desc"
)

// AllValues returns all ComplexChallengesResultsListOrderBy values.
func (ComplexChallengesResultsListOrderBy) AllValues() []ComplexChallengesResultsListOrderBy {
	return []ComplexChallengesResultsListOrderBy{
		ComplexChallengesResultsListOrderByIDAsc,
		ComplexChallengesResultsListOrderByIDDesc,
		ComplexChallengesResultsListOrderByUserIDAsc,
		ComplexChallengesResultsListOrderByUserIDDesc,
		ComplexChallengesResultsListOrderByComplexchIDAsc,
		ComplexChallengesResultsListOrderByComplexchIDDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ComplexChallengesResultsListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case ComplexChallengesResultsListOrderByIDAsc:
		return []byte(s), nil
	case ComplexChallengesResultsListOrderByIDDesc:
		return []byte(s), nil
	case ComplexChallengesResultsListOrderByUserIDAsc:
		return []byte(s), nil
	case ComplexChallengesResultsListOrderByUserIDDesc:
		return []byte(s), nil
	case ComplexChallengesResultsListOrderByComplexchIDAsc:
		return []byte(s), nil
	case ComplexChallengesResultsListOrderByComplexchIDDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ComplexChallengesResultsListOrderBy) UnmarshalText(data []byte) error {
	switch ComplexChallengesResultsListOrderBy(data) {
	case ComplexChallengesResultsListOrderByIDAsc:
		*s = ComplexChallengesResultsListOrderByIDAsc
		return nil
	case ComplexChallengesResultsListOrderByIDDesc:
		*s = ComplexChallengesResultsListOrderByIDDesc
		return nil
	case ComplexChallengesResultsListOrderByUserIDAsc:
		*s = ComplexChallengesResultsListOrderByUserIDAsc
		return nil
	case ComplexChallengesResultsListOrderByUserIDDesc:
		*s = ComplexChallengesResultsListOrderByUserIDDesc
		return nil
	case ComplexChallengesResultsListOrderByComplexchIDAsc:
		*s = ComplexChallengesResultsListOrderByComplexchIDAsc
		return nil
	case ComplexChallengesResultsListOrderByComplexchIDDesc:
		*s = ComplexChallengesResultsListOrderByComplexchIDDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ComplexchGoalNotFound struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ComplexchGoalNotFound) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ComplexchGoalNotFound) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*ComplexchGoalNotFound) complexChallengeGoalDeleteRes() {}
func (*ComplexchGoalNotFound) complexChallengeGoalReadRes()   {}
func (*ComplexchGoalNotFound) complexChallengeGoalUpdateRes() {}

type ComplexchNotFound struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ComplexchNotFound) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ComplexchNotFound) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*ComplexchNotFound) complexChallengeGoalCreateRes() {}
func (*ComplexchNotFound) complexChallengePublicRes()     {}
func (*ComplexchNotFound) complexChallengeReadRes()       {}
func (*ComplexchNotFound) complexChallengeUpdateRes()     {}
func (*ComplexchNotFound) complexChallengeValidateRes()   {}

// Ref: #/components/responses/ComplexchNotUpdatable
type ComplexchNotUpdatable struct{}

func (*ComplexchNotUpdatable) complexChallengeGoalCreateRes() {}
func (*ComplexchNotUpdatable) complexChallengeGoalDeleteRes() {}
func (*ComplexchNotUpdatable) complexChallengeGoalUpdateRes() {}
func (*ComplexchNotUpdatable) complexChallengeUpdateRes()     {}

// Ref: #/components/schemas/Error
type Error struct {
	// Текстовое описание ошибки. В первую очередь
	// предназначено для разработчиков. Но в случае
	// отсуствия `verbose_message` в ответе, можно использовать и
	// `error_message`.
	ErrorMessage string `json:"error_message"`
	// Человеко-понятное описание ошибки. Присуствует
	// только в некоторых случаях.
	VerboseMessage OptString `json:"verbose_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Error) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetVerboseMessage returns the value of VerboseMessage.
func (s *Error) GetVerboseMessage() OptString {
	return s.VerboseMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Error) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetVerboseMessage sets the value of VerboseMessage.
func (s *Error) SetVerboseMessage(val OptString) {
	s.VerboseMessage = val
}

func (*Error) instrumentReadRes()  {}
func (*Error) traditionCreateRes() {}
func (*Error) traditionReadRes()   {}

// Ref: #/components/schemas/FormulaOperand
type FormulaOperand struct {
	// Тип операнда: группа операторов, числовой литерал,
	// имя числовой переменной, агрегатная функция.
	Type FormulaOperandType `json:"type"`
	// Число литерала.
	LiteralValue OptFloat64 `json:"literal_value"`
	// Имя переменной.
	VariableName OptString `json:"variable_name"`
	// Имя агрегатной функции.
	AggFunc OptString `json:"agg_func"`
	// Аргумент функции (как правило, имя переменной).
	FuncArgument OptString `json:"func_argument"`
	// Вектор сгруппированных операций входящих в этот
	// операнд.
	Children []FormulaOperation `json:"children"`
}

// GetType returns the value of Type.
func (s *FormulaOperand) GetType() FormulaOperandType {
	return s.Type
}

// GetLiteralValue returns the value of LiteralValue.
func (s *FormulaOperand) GetLiteralValue() OptFloat64 {
	return s.LiteralValue
}

// GetVariableName returns the value of VariableName.
func (s *FormulaOperand) GetVariableName() OptString {
	return s.VariableName
}

// GetAggFunc returns the value of AggFunc.
func (s *FormulaOperand) GetAggFunc() OptString {
	return s.AggFunc
}

// GetFuncArgument returns the value of FuncArgument.
func (s *FormulaOperand) GetFuncArgument() OptString {
	return s.FuncArgument
}

// GetChildren returns the value of Children.
func (s *FormulaOperand) GetChildren() []FormulaOperation {
	return s.Children
}

// SetType sets the value of Type.
func (s *FormulaOperand) SetType(val FormulaOperandType) {
	s.Type = val
}

// SetLiteralValue sets the value of LiteralValue.
func (s *FormulaOperand) SetLiteralValue(val OptFloat64) {
	s.LiteralValue = val
}

// SetVariableName sets the value of VariableName.
func (s *FormulaOperand) SetVariableName(val OptString) {
	s.VariableName = val
}

// SetAggFunc sets the value of AggFunc.
func (s *FormulaOperand) SetAggFunc(val OptString) {
	s.AggFunc = val
}

// SetFuncArgument sets the value of FuncArgument.
func (s *FormulaOperand) SetFuncArgument(val OptString) {
	s.FuncArgument = val
}

// SetChildren sets the value of Children.
func (s *FormulaOperand) SetChildren(val []FormulaOperation) {
	s.Children = val
}

// Тип операнда: группа операторов, числовой литерал,
// имя числовой переменной, агрегатная функция.
type FormulaOperandType string

const (
	FormulaOperandTypeGroup    FormulaOperandType = "group"
	FormulaOperandTypeLiteral  FormulaOperandType = "literal"
	FormulaOperandTypeVariable FormulaOperandType = "variable"
	FormulaOperandTypeAggFunc  FormulaOperandType = "agg_func"
)

// AllValues returns all FormulaOperandType values.
func (FormulaOperandType) AllValues() []FormulaOperandType {
	return []FormulaOperandType{
		FormulaOperandTypeGroup,
		FormulaOperandTypeLiteral,
		FormulaOperandTypeVariable,
		FormulaOperandTypeAggFunc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FormulaOperandType) MarshalText() ([]byte, error) {
	switch s {
	case FormulaOperandTypeGroup:
		return []byte(s), nil
	case FormulaOperandTypeLiteral:
		return []byte(s), nil
	case FormulaOperandTypeVariable:
		return []byte(s), nil
	case FormulaOperandTypeAggFunc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FormulaOperandType) UnmarshalText(data []byte) error {
	switch FormulaOperandType(data) {
	case FormulaOperandTypeGroup:
		*s = FormulaOperandTypeGroup
		return nil
	case FormulaOperandTypeLiteral:
		*s = FormulaOperandTypeLiteral
		return nil
	case FormulaOperandTypeVariable:
		*s = FormulaOperandTypeVariable
		return nil
	case FormulaOperandTypeAggFunc:
		*s = FormulaOperandTypeAggFunc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FormulaOperation
type FormulaOperation struct {
	Operator FormulaOperationOperator `json:"operator"`
	Operand  FormulaOperand           `json:"operand"`
}

// GetOperator returns the value of Operator.
func (s *FormulaOperation) GetOperator() FormulaOperationOperator {
	return s.Operator
}

// GetOperand returns the value of Operand.
func (s *FormulaOperation) GetOperand() FormulaOperand {
	return s.Operand
}

// SetOperator sets the value of Operator.
func (s *FormulaOperation) SetOperator(val FormulaOperationOperator) {
	s.Operator = val
}

// SetOperand sets the value of Operand.
func (s *FormulaOperation) SetOperand(val FormulaOperand) {
	s.Operand = val
}

type FormulaOperationOperator string

const (
	FormulaOperationOperator_Plus  FormulaOperationOperator = "+"
	FormulaOperationOperator_Minus FormulaOperationOperator = "-"
	FormulaOperationOperator_      FormulaOperationOperator = "*"
	FormulaOperationOperator_Slash FormulaOperationOperator = "/"
)

// AllValues returns all FormulaOperationOperator values.
func (FormulaOperationOperator) AllValues() []FormulaOperationOperator {
	return []FormulaOperationOperator{
		FormulaOperationOperator_Plus,
		FormulaOperationOperator_Minus,
		FormulaOperationOperator_,
		FormulaOperationOperator_Slash,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FormulaOperationOperator) MarshalText() ([]byte, error) {
	switch s {
	case FormulaOperationOperator_Plus:
		return []byte(s), nil
	case FormulaOperationOperator_Minus:
		return []byte(s), nil
	case FormulaOperationOperator_:
		return []byte(s), nil
	case FormulaOperationOperator_Slash:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FormulaOperationOperator) UnmarshalText(data []byte) error {
	switch FormulaOperationOperator(data) {
	case FormulaOperationOperator_Plus:
		*s = FormulaOperationOperator_Plus
		return nil
	case FormulaOperationOperator_Minus:
		*s = FormulaOperationOperator_Minus
		return nil
	case FormulaOperationOperator_:
		*s = FormulaOperationOperator_
		return nil
	case FormulaOperationOperator_Slash:
		*s = FormulaOperationOperator_Slash
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FormulaParseOKApplicationJSON []FormulaOperation

func (*FormulaParseOKApplicationJSON) formulaParseRes() {}

type FormulaParseReq struct {
	// Тип формулы: агрегация множества активностей,
	// вычисление финального балла.
	Type FormulaParseReqType `json:"type"`
	// Строка с текстовым представлением формулы.
	Body string `json:"body"`
}

// GetType returns the value of Type.
func (s *FormulaParseReq) GetType() FormulaParseReqType {
	return s.Type
}

// GetBody returns the value of Body.
func (s *FormulaParseReq) GetBody() string {
	return s.Body
}

// SetType sets the value of Type.
func (s *FormulaParseReq) SetType(val FormulaParseReqType) {
	s.Type = val
}

// SetBody sets the value of Body.
func (s *FormulaParseReq) SetBody(val string) {
	s.Body = val
}

// Тип формулы: агрегация множества активностей,
// вычисление финального балла.
type FormulaParseReqType string

const (
	FormulaParseReqTypeOne  FormulaParseReqType = "one"
	FormulaParseReqTypeMany FormulaParseReqType = "many"
)

// AllValues returns all FormulaParseReqType values.
func (FormulaParseReqType) AllValues() []FormulaParseReqType {
	return []FormulaParseReqType{
		FormulaParseReqTypeOne,
		FormulaParseReqTypeMany,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FormulaParseReqType) MarshalText() ([]byte, error) {
	switch s {
	case FormulaParseReqTypeOne:
		return []byte(s), nil
	case FormulaParseReqTypeMany:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FormulaParseReqType) UnmarshalText(data []byte) error {
	switch FormulaParseReqType(data) {
	case FormulaParseReqTypeOne:
		*s = FormulaParseReqTypeOne
		return nil
	case FormulaParseReqTypeMany:
		*s = FormulaParseReqTypeMany
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FormulaValidationError
type FormulaValidationError struct {
	// Текст ошибки валидации.
	ErrorMessage string `json:"error_message"`
	// Место в формуле (последовательность символов),
	// которое привело к ошибке.
	ErrorPlace string `json:"error_place"`
	// Левая граница последовательности, в которой возникла
	// ошибка.
	PosLeft int `json:"pos_left"`
	// Правая граница последовательности, в которой
	// возникла ошибка.
	PosRight int `json:"pos_right"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *FormulaValidationError) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetErrorPlace returns the value of ErrorPlace.
func (s *FormulaValidationError) GetErrorPlace() string {
	return s.ErrorPlace
}

// GetPosLeft returns the value of PosLeft.
func (s *FormulaValidationError) GetPosLeft() int {
	return s.PosLeft
}

// GetPosRight returns the value of PosRight.
func (s *FormulaValidationError) GetPosRight() int {
	return s.PosRight
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *FormulaValidationError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetErrorPlace sets the value of ErrorPlace.
func (s *FormulaValidationError) SetErrorPlace(val string) {
	s.ErrorPlace = val
}

// SetPosLeft sets the value of PosLeft.
func (s *FormulaValidationError) SetPosLeft(val int) {
	s.PosLeft = val
}

// SetPosRight sets the value of PosRight.
func (s *FormulaValidationError) SetPosRight(val int) {
	s.PosRight = val
}

func (*FormulaValidationError) formulaParseRes() {}

// Инструмент традиции.
// Ref: #/components/schemas/Instrument
type Instrument struct {
	// Идентификатор инструмента.
	ID int32 `json:"id"`
	// ID традиции.
	TraditionID int32 `json:"tradition_id"`
	// ID компетенции.
	CompetencyID int32 `json:"competency_id"`
	// Название инструмента.
	Name string `json:"name"`
	// Изображение инструмента.
	Image url.URL `json:"image"`
	// Описание инструмента.
	Description string `json:"description"`
	// Активен ли инструмент.
	IsActive bool `json:"is_active"`
}

// GetID returns the value of ID.
func (s *Instrument) GetID() int32 {
	return s.ID
}

// GetTraditionID returns the value of TraditionID.
func (s *Instrument) GetTraditionID() int32 {
	return s.TraditionID
}

// GetCompetencyID returns the value of CompetencyID.
func (s *Instrument) GetCompetencyID() int32 {
	return s.CompetencyID
}

// GetName returns the value of Name.
func (s *Instrument) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *Instrument) GetImage() url.URL {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *Instrument) GetDescription() string {
	return s.Description
}

// GetIsActive returns the value of IsActive.
func (s *Instrument) GetIsActive() bool {
	return s.IsActive
}

// SetID sets the value of ID.
func (s *Instrument) SetID(val int32) {
	s.ID = val
}

// SetTraditionID sets the value of TraditionID.
func (s *Instrument) SetTraditionID(val int32) {
	s.TraditionID = val
}

// SetCompetencyID sets the value of CompetencyID.
func (s *Instrument) SetCompetencyID(val int32) {
	s.CompetencyID = val
}

// SetName sets the value of Name.
func (s *Instrument) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *Instrument) SetImage(val url.URL) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *Instrument) SetDescription(val string) {
	s.Description = val
}

// SetIsActive sets the value of IsActive.
func (s *Instrument) SetIsActive(val bool) {
	s.IsActive = val
}

func (*Instrument) instrumentCreateRes() {}
func (*Instrument) instrumentReadRes()   {}
func (*Instrument) instrumentUpdateRes() {}

type InstrumentCreateConflict Error

func (*InstrumentCreateConflict) instrumentCreateRes() {}

// Создание инструмента традиции.
// Ref: #/components/schemas/InstrumentCreateRequest
type InstrumentCreateRequest struct {
	// ID традиции.
	TraditionID int32 `json:"tradition_id"`
	// ID компетенции.
	CompetencyID int32 `json:"competency_id"`
	// Название инструмента.
	Name string `json:"name"`
	// Изображение инструмента.
	Image url.URL `json:"image"`
	// Описание инструмента.
	Description string `json:"description"`
}

// GetTraditionID returns the value of TraditionID.
func (s *InstrumentCreateRequest) GetTraditionID() int32 {
	return s.TraditionID
}

// GetCompetencyID returns the value of CompetencyID.
func (s *InstrumentCreateRequest) GetCompetencyID() int32 {
	return s.CompetencyID
}

// GetName returns the value of Name.
func (s *InstrumentCreateRequest) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *InstrumentCreateRequest) GetImage() url.URL {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *InstrumentCreateRequest) GetDescription() string {
	return s.Description
}

// SetTraditionID sets the value of TraditionID.
func (s *InstrumentCreateRequest) SetTraditionID(val int32) {
	s.TraditionID = val
}

// SetCompetencyID sets the value of CompetencyID.
func (s *InstrumentCreateRequest) SetCompetencyID(val int32) {
	s.CompetencyID = val
}

// SetName sets the value of Name.
func (s *InstrumentCreateRequest) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *InstrumentCreateRequest) SetImage(val url.URL) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *InstrumentCreateRequest) SetDescription(val string) {
	s.Description = val
}

type InstrumentCreateUnprocessableEntity Error

func (*InstrumentCreateUnprocessableEntity) instrumentCreateRes() {}

type InstrumentID int32

type InstrumentUpdateConflict Error

func (*InstrumentUpdateConflict) instrumentUpdateRes() {}

type InstrumentUpdateNotFound Error

func (*InstrumentUpdateNotFound) instrumentUpdateRes() {}

// Обновление инструмента традиции.
// Ref: #/components/schemas/InstrumentUpdateRequest
type InstrumentUpdateRequest struct {
	// ID традиции.
	TraditionID OptInt32 `json:"tradition_id"`
	// ID компетенции.
	CompetencyID OptInt32 `json:"competency_id"`
	// Название инструмента.
	Name OptString `json:"name"`
	// Изображение инструмента.
	Image OptURI `json:"image"`
	// Описание инструмента.
	Description OptString `json:"description"`
	// Признак активности инструмента. Удаление
	// инструмента не предусмотрено, но его можно скрыть,
	// поменяв значение этого поля на false.
	IsActive OptBool `json:"is_active"`
}

// GetTraditionID returns the value of TraditionID.
func (s *InstrumentUpdateRequest) GetTraditionID() OptInt32 {
	return s.TraditionID
}

// GetCompetencyID returns the value of CompetencyID.
func (s *InstrumentUpdateRequest) GetCompetencyID() OptInt32 {
	return s.CompetencyID
}

// GetName returns the value of Name.
func (s *InstrumentUpdateRequest) GetName() OptString {
	return s.Name
}

// GetImage returns the value of Image.
func (s *InstrumentUpdateRequest) GetImage() OptURI {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *InstrumentUpdateRequest) GetDescription() OptString {
	return s.Description
}

// GetIsActive returns the value of IsActive.
func (s *InstrumentUpdateRequest) GetIsActive() OptBool {
	return s.IsActive
}

// SetTraditionID sets the value of TraditionID.
func (s *InstrumentUpdateRequest) SetTraditionID(val OptInt32) {
	s.TraditionID = val
}

// SetCompetencyID sets the value of CompetencyID.
func (s *InstrumentUpdateRequest) SetCompetencyID(val OptInt32) {
	s.CompetencyID = val
}

// SetName sets the value of Name.
func (s *InstrumentUpdateRequest) SetName(val OptString) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *InstrumentUpdateRequest) SetImage(val OptURI) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *InstrumentUpdateRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetIsActive sets the value of IsActive.
func (s *InstrumentUpdateRequest) SetIsActive(val OptBool) {
	s.IsActive = val
}

type InstrumentUpdateUnprocessableEntity Error

func (*InstrumentUpdateUnprocessableEntity) instrumentUpdateRes() {}

type InstrumentsListIsActive string

const (
	InstrumentsListIsActiveTrue  InstrumentsListIsActive = "true"
	InstrumentsListIsActiveFalse InstrumentsListIsActive = "false"
	InstrumentsListIsActiveAll   InstrumentsListIsActive = "all"
)

// AllValues returns all InstrumentsListIsActive values.
func (InstrumentsListIsActive) AllValues() []InstrumentsListIsActive {
	return []InstrumentsListIsActive{
		InstrumentsListIsActiveTrue,
		InstrumentsListIsActiveFalse,
		InstrumentsListIsActiveAll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstrumentsListIsActive) MarshalText() ([]byte, error) {
	switch s {
	case InstrumentsListIsActiveTrue:
		return []byte(s), nil
	case InstrumentsListIsActiveFalse:
		return []byte(s), nil
	case InstrumentsListIsActiveAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstrumentsListIsActive) UnmarshalText(data []byte) error {
	switch InstrumentsListIsActive(data) {
	case InstrumentsListIsActiveTrue:
		*s = InstrumentsListIsActiveTrue
		return nil
	case InstrumentsListIsActiveFalse:
		*s = InstrumentsListIsActiveFalse
		return nil
	case InstrumentsListIsActiveAll:
		*s = InstrumentsListIsActiveAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// InstrumentsListOKHeaders wraps []Instrument with response headers.
type InstrumentsListOKHeaders struct {
	XCount   int64
	Response []Instrument
}

// GetXCount returns the value of XCount.
func (s *InstrumentsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *InstrumentsListOKHeaders) GetResponse() []Instrument {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *InstrumentsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *InstrumentsListOKHeaders) SetResponse(val []Instrument) {
	s.Response = val
}

type InstrumentsListOrderBy string

const (
	InstrumentsListOrderByIDAsc  InstrumentsListOrderBy = "id_asc"
	InstrumentsListOrderByIDDesc InstrumentsListOrderBy = "id_desc"
)

// AllValues returns all InstrumentsListOrderBy values.
func (InstrumentsListOrderBy) AllValues() []InstrumentsListOrderBy {
	return []InstrumentsListOrderBy{
		InstrumentsListOrderByIDAsc,
		InstrumentsListOrderByIDDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstrumentsListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case InstrumentsListOrderByIDAsc:
		return []byte(s), nil
	case InstrumentsListOrderByIDDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstrumentsListOrderBy) UnmarshalText(data []byte) error {
	switch InstrumentsListOrderBy(data) {
	case InstrumentsListOrderByIDAsc:
		*s = InstrumentsListOrderByIDAsc
		return nil
	case InstrumentsListOrderByIDDesc:
		*s = InstrumentsListOrderByIDDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewNilDateTime returns new NilDateTime with value set to v.
func NewNilDateTime(v time.Time) NilDateTime {
	return NilDateTime{
		Value: v,
	}
}

// NilDateTime is nullable time.Time.
type NilDateTime struct {
	Value time.Time
	Null  bool
}

// SetTo sets value to v.
func (o *NilDateTime) SetTo(v time.Time) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilDateTime) SetToNull() {
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFloat64 returns new NilFloat64 with value set to v.
func NewNilFloat64(v float64) NilFloat64 {
	return NilFloat64{
		Value: v,
	}
}

// NilFloat64 is nullable float64.
type NilFloat64 struct {
	Value float64
	Null  bool
}

// SetTo sets value to v.
func (o *NilFloat64) SetTo(v float64) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilFloat64) SetToNull() {
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInstrumentID returns new NilInstrumentID with value set to v.
func NewNilInstrumentID(v InstrumentID) NilInstrumentID {
	return NilInstrumentID{
		Value: v,
	}
}

// NilInstrumentID is nullable InstrumentID.
type NilInstrumentID struct {
	Value InstrumentID
	Null  bool
}

// SetTo sets value to v.
func (o *NilInstrumentID) SetTo(v InstrumentID) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInstrumentID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInstrumentID) SetToNull() {
	o.Null = true
	var v InstrumentID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInstrumentID) Get() (v InstrumentID, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInstrumentID) Or(d InstrumentID) InstrumentID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTraditionID returns new NilTraditionID with value set to v.
func NewNilTraditionID(v TraditionID) NilTraditionID {
	return NilTraditionID{
		Value: v,
	}
}

// NilTraditionID is nullable TraditionID.
type NilTraditionID struct {
	Value TraditionID
	Null  bool
}

// SetTo sets value to v.
func (o *NilTraditionID) SetTo(v TraditionID) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTraditionID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTraditionID) SetToNull() {
	o.Null = true
	var v TraditionID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTraditionID) Get() (v TraditionID, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTraditionID) Or(d TraditionID) TraditionID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAwardsListOrderBy returns new OptAwardsListOrderBy with value set to v.
func NewOptAwardsListOrderBy(v AwardsListOrderBy) OptAwardsListOrderBy {
	return OptAwardsListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptAwardsListOrderBy is optional AwardsListOrderBy.
type OptAwardsListOrderBy struct {
	Value AwardsListOrderBy
	Set   bool
}

// IsSet returns true if OptAwardsListOrderBy was set.
func (o OptAwardsListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAwardsListOrderBy) Reset() {
	var v AwardsListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAwardsListOrderBy) SetTo(v AwardsListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAwardsListOrderBy) Get() (v AwardsListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAwardsListOrderBy) Or(d AwardsListOrderBy) AwardsListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComplexChallengeUpdateStrategy returns new OptComplexChallengeUpdateStrategy with value set to v.
func NewOptComplexChallengeUpdateStrategy(v ComplexChallengeUpdateStrategy) OptComplexChallengeUpdateStrategy {
	return OptComplexChallengeUpdateStrategy{
		Value: v,
		Set:   true,
	}
}

// OptComplexChallengeUpdateStrategy is optional ComplexChallengeUpdateStrategy.
type OptComplexChallengeUpdateStrategy struct {
	Value ComplexChallengeUpdateStrategy
	Set   bool
}

// IsSet returns true if OptComplexChallengeUpdateStrategy was set.
func (o OptComplexChallengeUpdateStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComplexChallengeUpdateStrategy) Reset() {
	var v ComplexChallengeUpdateStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComplexChallengeUpdateStrategy) SetTo(v ComplexChallengeUpdateStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComplexChallengeUpdateStrategy) Get() (v ComplexChallengeUpdateStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComplexChallengeUpdateStrategy) Or(d ComplexChallengeUpdateStrategy) ComplexChallengeUpdateStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptComplexChallengesResultsListOrderBy returns new OptComplexChallengesResultsListOrderBy with value set to v.
func NewOptComplexChallengesResultsListOrderBy(v ComplexChallengesResultsListOrderBy) OptComplexChallengesResultsListOrderBy {
	return OptComplexChallengesResultsListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptComplexChallengesResultsListOrderBy is optional ComplexChallengesResultsListOrderBy.
type OptComplexChallengesResultsListOrderBy struct {
	Value ComplexChallengesResultsListOrderBy
	Set   bool
}

// IsSet returns true if OptComplexChallengesResultsListOrderBy was set.
func (o OptComplexChallengesResultsListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptComplexChallengesResultsListOrderBy) Reset() {
	var v ComplexChallengesResultsListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptComplexChallengesResultsListOrderBy) SetTo(v ComplexChallengesResultsListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptComplexChallengesResultsListOrderBy) Get() (v ComplexChallengesResultsListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptComplexChallengesResultsListOrderBy) Or(d ComplexChallengesResultsListOrderBy) ComplexChallengesResultsListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstrumentsListIsActive returns new OptInstrumentsListIsActive with value set to v.
func NewOptInstrumentsListIsActive(v InstrumentsListIsActive) OptInstrumentsListIsActive {
	return OptInstrumentsListIsActive{
		Value: v,
		Set:   true,
	}
}

// OptInstrumentsListIsActive is optional InstrumentsListIsActive.
type OptInstrumentsListIsActive struct {
	Value InstrumentsListIsActive
	Set   bool
}

// IsSet returns true if OptInstrumentsListIsActive was set.
func (o OptInstrumentsListIsActive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstrumentsListIsActive) Reset() {
	var v InstrumentsListIsActive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstrumentsListIsActive) SetTo(v InstrumentsListIsActive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstrumentsListIsActive) Get() (v InstrumentsListIsActive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstrumentsListIsActive) Or(d InstrumentsListIsActive) InstrumentsListIsActive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstrumentsListOrderBy returns new OptInstrumentsListOrderBy with value set to v.
func NewOptInstrumentsListOrderBy(v InstrumentsListOrderBy) OptInstrumentsListOrderBy {
	return OptInstrumentsListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptInstrumentsListOrderBy is optional InstrumentsListOrderBy.
type OptInstrumentsListOrderBy struct {
	Value InstrumentsListOrderBy
	Set   bool
}

// IsSet returns true if OptInstrumentsListOrderBy was set.
func (o OptInstrumentsListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstrumentsListOrderBy) Reset() {
	var v InstrumentsListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstrumentsListOrderBy) SetTo(v InstrumentsListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstrumentsListOrderBy) Get() (v InstrumentsListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstrumentsListOrderBy) Or(d InstrumentsListOrderBy) InstrumentsListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTraditionsListIsActive returns new OptTraditionsListIsActive with value set to v.
func NewOptTraditionsListIsActive(v TraditionsListIsActive) OptTraditionsListIsActive {
	return OptTraditionsListIsActive{
		Value: v,
		Set:   true,
	}
}

// OptTraditionsListIsActive is optional TraditionsListIsActive.
type OptTraditionsListIsActive struct {
	Value TraditionsListIsActive
	Set   bool
}

// IsSet returns true if OptTraditionsListIsActive was set.
func (o OptTraditionsListIsActive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTraditionsListIsActive) Reset() {
	var v TraditionsListIsActive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTraditionsListIsActive) SetTo(v TraditionsListIsActive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTraditionsListIsActive) Get() (v TraditionsListIsActive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTraditionsListIsActive) Or(d TraditionsListIsActive) TraditionsListIsActive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserProgressListOrderBy returns new OptUserProgressListOrderBy with value set to v.
func NewOptUserProgressListOrderBy(v UserProgressListOrderBy) OptUserProgressListOrderBy {
	return OptUserProgressListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptUserProgressListOrderBy is optional UserProgressListOrderBy.
type OptUserProgressListOrderBy struct {
	Value UserProgressListOrderBy
	Set   bool
}

// IsSet returns true if OptUserProgressListOrderBy was set.
func (o OptUserProgressListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserProgressListOrderBy) Reset() {
	var v UserProgressListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserProgressListOrderBy) SetTo(v UserProgressListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserProgressListOrderBy) Get() (v UserProgressListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserProgressListOrderBy) Or(d UserProgressListOrderBy) UserProgressListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PassedChallengesListOKHeaders wraps []PassedChallengesListOKItem with response headers.
type PassedChallengesListOKHeaders struct {
	XCount   int64
	Response []PassedChallengesListOKItem
}

// GetXCount returns the value of XCount.
func (s *PassedChallengesListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *PassedChallengesListOKHeaders) GetResponse() []PassedChallengesListOKItem {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *PassedChallengesListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *PassedChallengesListOKHeaders) SetResponse(val []PassedChallengesListOKItem) {
	s.Response = val
}

type PassedChallengesListOKItem struct {
	ChallengeID int32 `json:"challenge_id"`
	// Дата прохождения испытания.
	PassedAt time.Time `json:"passed_at"`
}

// GetChallengeID returns the value of ChallengeID.
func (s *PassedChallengesListOKItem) GetChallengeID() int32 {
	return s.ChallengeID
}

// GetPassedAt returns the value of PassedAt.
func (s *PassedChallengesListOKItem) GetPassedAt() time.Time {
	return s.PassedAt
}

// SetChallengeID sets the value of ChallengeID.
func (s *PassedChallengesListOKItem) SetChallengeID(val int32) {
	s.ChallengeID = val
}

// SetPassedAt sets the value of PassedAt.
func (s *PassedChallengesListOKItem) SetPassedAt(val time.Time) {
	s.PassedAt = val
}

// Merged schema.
// Ref: #/components/schemas/PlayerAward
type PlayerAward struct {
	// Идентификатор награды.
	AwardID int32 `json:"award_id"`
	// Дата выдачи награды системой.
	AwardedAt time.Time `json:"awarded_at"`
	// Дата оповещенения игрока о получении награды в
	// приложении. Содержит null, если награда еще не
	// демонстрировалась игроку.
	DisplayedAt NilDateTime `json:"displayed_at"`
}

// GetAwardID returns the value of AwardID.
func (s *PlayerAward) GetAwardID() int32 {
	return s.AwardID
}

// GetAwardedAt returns the value of AwardedAt.
func (s *PlayerAward) GetAwardedAt() time.Time {
	return s.AwardedAt
}

// GetDisplayedAt returns the value of DisplayedAt.
func (s *PlayerAward) GetDisplayedAt() NilDateTime {
	return s.DisplayedAt
}

// SetAwardID sets the value of AwardID.
func (s *PlayerAward) SetAwardID(val int32) {
	s.AwardID = val
}

// SetAwardedAt sets the value of AwardedAt.
func (s *PlayerAward) SetAwardedAt(val time.Time) {
	s.AwardedAt = val
}

// SetDisplayedAt sets the value of DisplayedAt.
func (s *PlayerAward) SetDisplayedAt(val NilDateTime) {
	s.DisplayedAt = val
}

// Прогресс пользователя по традиции или инструменту.
// Ref: #/components/schemas/Progress
type Progress struct {
	TraditionID  NilTraditionID  `json:"tradition_id"`
	InstrumentID NilInstrumentID `json:"instrument_id"`
	// Текущее кол-во баллов.
	Scores float64 `json:"scores"`
	// Текущий уровень традиции/инструмента.
	AwardLevel int32 `json:"award_level"`
}

// GetTraditionID returns the value of TraditionID.
func (s *Progress) GetTraditionID() NilTraditionID {
	return s.TraditionID
}

// GetInstrumentID returns the value of InstrumentID.
func (s *Progress) GetInstrumentID() NilInstrumentID {
	return s.InstrumentID
}

// GetScores returns the value of Scores.
func (s *Progress) GetScores() float64 {
	return s.Scores
}

// GetAwardLevel returns the value of AwardLevel.
func (s *Progress) GetAwardLevel() int32 {
	return s.AwardLevel
}

// SetTraditionID sets the value of TraditionID.
func (s *Progress) SetTraditionID(val NilTraditionID) {
	s.TraditionID = val
}

// SetInstrumentID sets the value of InstrumentID.
func (s *Progress) SetInstrumentID(val NilInstrumentID) {
	s.InstrumentID = val
}

// SetScores sets the value of Scores.
func (s *Progress) SetScores(val float64) {
	s.Scores = val
}

// SetAwardLevel sets the value of AwardLevel.
func (s *Progress) SetAwardLevel(val int32) {
	s.AwardLevel = val
}

type TalentOAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *TalentOAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *TalentOAuth) SetToken(val string) {
	s.Token = val
}

// Merged schema.
// Ref: #/components/schemas/TalentUserAward
type TalentUserAward struct {
	// Идентификатор награды.
	AwardID int32 `json:"award_id"`
	// Дата выдачи награды системой.
	AwardedAt time.Time `json:"awarded_at"`
	// Даты отображения награды в приложениях.
	Displayed []TalentUserAwardDisplayedItem `json:"displayed"`
}

// GetAwardID returns the value of AwardID.
func (s *TalentUserAward) GetAwardID() int32 {
	return s.AwardID
}

// GetAwardedAt returns the value of AwardedAt.
func (s *TalentUserAward) GetAwardedAt() time.Time {
	return s.AwardedAt
}

// GetDisplayed returns the value of Displayed.
func (s *TalentUserAward) GetDisplayed() []TalentUserAwardDisplayedItem {
	return s.Displayed
}

// SetAwardID sets the value of AwardID.
func (s *TalentUserAward) SetAwardID(val int32) {
	s.AwardID = val
}

// SetAwardedAt sets the value of AwardedAt.
func (s *TalentUserAward) SetAwardedAt(val time.Time) {
	s.AwardedAt = val
}

// SetDisplayed sets the value of Displayed.
func (s *TalentUserAward) SetDisplayed(val []TalentUserAwardDisplayedItem) {
	s.Displayed = val
}

type TalentUserAwardDisplayedItem struct {
	ApplicationID ApplicationID `json:"application_id"`
	DisplayedAt   time.Time     `json:"displayed_at"`
}

// GetApplicationID returns the value of ApplicationID.
func (s *TalentUserAwardDisplayedItem) GetApplicationID() ApplicationID {
	return s.ApplicationID
}

// GetDisplayedAt returns the value of DisplayedAt.
func (s *TalentUserAwardDisplayedItem) GetDisplayedAt() time.Time {
	return s.DisplayedAt
}

// SetApplicationID sets the value of ApplicationID.
func (s *TalentUserAwardDisplayedItem) SetApplicationID(val ApplicationID) {
	s.ApplicationID = val
}

// SetDisplayedAt sets the value of DisplayedAt.
func (s *TalentUserAwardDisplayedItem) SetDisplayedAt(val time.Time) {
	s.DisplayedAt = val
}

// Традиция берлоги.
// Ref: #/components/schemas/Tradition
type Tradition struct {
	// Идентификатор традиции.
	ID int32 `json:"id"`
	// Название традиции.
	Name string `json:"name"`
	// Изображение традиции.
	Image url.URL `json:"image"`
	// Описание традиции.
	Description string `json:"description"`
	// Активна ли традиция.
	IsActive bool `json:"is_active"`
}

// GetID returns the value of ID.
func (s *Tradition) GetID() int32 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tradition) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *Tradition) GetImage() url.URL {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *Tradition) GetDescription() string {
	return s.Description
}

// GetIsActive returns the value of IsActive.
func (s *Tradition) GetIsActive() bool {
	return s.IsActive
}

// SetID sets the value of ID.
func (s *Tradition) SetID(val int32) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tradition) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *Tradition) SetImage(val url.URL) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *Tradition) SetDescription(val string) {
	s.Description = val
}

// SetIsActive sets the value of IsActive.
func (s *Tradition) SetIsActive(val bool) {
	s.IsActive = val
}

func (*Tradition) traditionCreateRes() {}
func (*Tradition) traditionReadRes()   {}
func (*Tradition) traditionUpdateRes() {}

// Создание традиции берлоги.
// Ref: #/components/schemas/TraditionCreateRequest
type TraditionCreateRequest struct {
	// Название традиции.
	Name string `json:"name"`
	// Изображение традиции.
	Image url.URL `json:"image"`
	// Описание традиции.
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *TraditionCreateRequest) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *TraditionCreateRequest) GetImage() url.URL {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *TraditionCreateRequest) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *TraditionCreateRequest) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *TraditionCreateRequest) SetImage(val url.URL) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *TraditionCreateRequest) SetDescription(val string) {
	s.Description = val
}

type TraditionID int32

type TraditionUpdateConflict Error

func (*TraditionUpdateConflict) traditionUpdateRes() {}

type TraditionUpdateNotFound Error

func (*TraditionUpdateNotFound) traditionUpdateRes() {}

// Обновление традиции берлоги.
// Ref: #/components/schemas/TraditionUpdateRequest
type TraditionUpdateRequest struct {
	// Название традиции.
	Name OptString `json:"name"`
	// Изображение традиции.
	Image OptURI `json:"image"`
	// Описание традиции.
	Description OptString `json:"description"`
	// Признак активности традиции. Удаление традиции не
	// предусмотрено, но ее можно скрыть, поменяв значение
	// этого поля на false.
	IsActive OptBool `json:"is_active"`
}

// GetName returns the value of Name.
func (s *TraditionUpdateRequest) GetName() OptString {
	return s.Name
}

// GetImage returns the value of Image.
func (s *TraditionUpdateRequest) GetImage() OptURI {
	return s.Image
}

// GetDescription returns the value of Description.
func (s *TraditionUpdateRequest) GetDescription() OptString {
	return s.Description
}

// GetIsActive returns the value of IsActive.
func (s *TraditionUpdateRequest) GetIsActive() OptBool {
	return s.IsActive
}

// SetName sets the value of Name.
func (s *TraditionUpdateRequest) SetName(val OptString) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *TraditionUpdateRequest) SetImage(val OptURI) {
	s.Image = val
}

// SetDescription sets the value of Description.
func (s *TraditionUpdateRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetIsActive sets the value of IsActive.
func (s *TraditionUpdateRequest) SetIsActive(val OptBool) {
	s.IsActive = val
}

type TraditionsListIsActive string

const (
	TraditionsListIsActiveTrue  TraditionsListIsActive = "true"
	TraditionsListIsActiveFalse TraditionsListIsActive = "false"
	TraditionsListIsActiveAll   TraditionsListIsActive = "all"
)

// AllValues returns all TraditionsListIsActive values.
func (TraditionsListIsActive) AllValues() []TraditionsListIsActive {
	return []TraditionsListIsActive{
		TraditionsListIsActiveTrue,
		TraditionsListIsActiveFalse,
		TraditionsListIsActiveAll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TraditionsListIsActive) MarshalText() ([]byte, error) {
	switch s {
	case TraditionsListIsActiveTrue:
		return []byte(s), nil
	case TraditionsListIsActiveFalse:
		return []byte(s), nil
	case TraditionsListIsActiveAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TraditionsListIsActive) UnmarshalText(data []byte) error {
	switch TraditionsListIsActive(data) {
	case TraditionsListIsActiveTrue:
		*s = TraditionsListIsActiveTrue
		return nil
	case TraditionsListIsActiveFalse:
		*s = TraditionsListIsActiveFalse
		return nil
	case TraditionsListIsActiveAll:
		*s = TraditionsListIsActiveAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UserAwardDisplayedOK is response for UserAwardDisplayed operation.
type UserAwardDisplayedOK struct{}

// UserAwardsListOKHeaders wraps []UserAwardsListOKItem with response headers.
type UserAwardsListOKHeaders struct {
	XCount   int64
	Response []UserAwardsListOKItem
}

// GetXCount returns the value of XCount.
func (s *UserAwardsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *UserAwardsListOKHeaders) GetResponse() []UserAwardsListOKItem {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *UserAwardsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *UserAwardsListOKHeaders) SetResponse(val []UserAwardsListOKItem) {
	s.Response = val
}

// UserAwardsListOKItem represents sum type.
type UserAwardsListOKItem struct {
	Type            UserAwardsListOKItemType // switch on this field
	PlayerAward     PlayerAward
	TalentUserAward TalentUserAward
}

// UserAwardsListOKItemType is oneOf type of UserAwardsListOKItem.
type UserAwardsListOKItemType string

// Possible values for UserAwardsListOKItemType.
const (
	PlayerAwardUserAwardsListOKItem     UserAwardsListOKItemType = "PlayerAward"
	TalentUserAwardUserAwardsListOKItem UserAwardsListOKItemType = "TalentUserAward"
)

// IsPlayerAward reports whether UserAwardsListOKItem is PlayerAward.
func (s UserAwardsListOKItem) IsPlayerAward() bool { return s.Type == PlayerAwardUserAwardsListOKItem }

// IsTalentUserAward reports whether UserAwardsListOKItem is TalentUserAward.
func (s UserAwardsListOKItem) IsTalentUserAward() bool {
	return s.Type == TalentUserAwardUserAwardsListOKItem
}

// SetPlayerAward sets UserAwardsListOKItem to PlayerAward.
func (s *UserAwardsListOKItem) SetPlayerAward(v PlayerAward) {
	s.Type = PlayerAwardUserAwardsListOKItem
	s.PlayerAward = v
}

// GetPlayerAward returns PlayerAward and true boolean if UserAwardsListOKItem is PlayerAward.
func (s UserAwardsListOKItem) GetPlayerAward() (v PlayerAward, ok bool) {
	if !s.IsPlayerAward() {
		return v, false
	}
	return s.PlayerAward, true
}

// NewPlayerAwardUserAwardsListOKItem returns new UserAwardsListOKItem from PlayerAward.
func NewPlayerAwardUserAwardsListOKItem(v PlayerAward) UserAwardsListOKItem {
	var s UserAwardsListOKItem
	s.SetPlayerAward(v)
	return s
}

// SetTalentUserAward sets UserAwardsListOKItem to TalentUserAward.
func (s *UserAwardsListOKItem) SetTalentUserAward(v TalentUserAward) {
	s.Type = TalentUserAwardUserAwardsListOKItem
	s.TalentUserAward = v
}

// GetTalentUserAward returns TalentUserAward and true boolean if UserAwardsListOKItem is TalentUserAward.
func (s UserAwardsListOKItem) GetTalentUserAward() (v TalentUserAward, ok bool) {
	if !s.IsTalentUserAward() {
		return v, false
	}
	return s.TalentUserAward, true
}

// NewTalentUserAwardUserAwardsListOKItem returns new UserAwardsListOKItem from TalentUserAward.
func NewTalentUserAwardUserAwardsListOKItem(v TalentUserAward) UserAwardsListOKItem {
	var s UserAwardsListOKItem
	s.SetTalentUserAward(v)
	return s
}

// UserProgressListOKHeaders wraps []Progress with response headers.
type UserProgressListOKHeaders struct {
	XCount   int64
	Response []Progress
}

// GetXCount returns the value of XCount.
func (s *UserProgressListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *UserProgressListOKHeaders) GetResponse() []Progress {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *UserProgressListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *UserProgressListOKHeaders) SetResponse(val []Progress) {
	s.Response = val
}

type UserProgressListOrderBy string

const (
	UserProgressListOrderByCreatedAtDesc UserProgressListOrderBy = "created_at_desc"
	UserProgressListOrderByCreatedAtAsc  UserProgressListOrderBy = "created_at_asc"
	UserProgressListOrderByUpdatedAtDesc UserProgressListOrderBy = "updated_at_desc"
	UserProgressListOrderByUpdatedAtAsc  UserProgressListOrderBy = "updated_at_asc"
	UserProgressListOrderByTraditionID   UserProgressListOrderBy = "tradition_id"
	UserProgressListOrderByInstrumentID  UserProgressListOrderBy = "instrument_id"
)

// AllValues returns all UserProgressListOrderBy values.
func (UserProgressListOrderBy) AllValues() []UserProgressListOrderBy {
	return []UserProgressListOrderBy{
		UserProgressListOrderByCreatedAtDesc,
		UserProgressListOrderByCreatedAtAsc,
		UserProgressListOrderByUpdatedAtDesc,
		UserProgressListOrderByUpdatedAtAsc,
		UserProgressListOrderByTraditionID,
		UserProgressListOrderByInstrumentID,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserProgressListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case UserProgressListOrderByCreatedAtDesc:
		return []byte(s), nil
	case UserProgressListOrderByCreatedAtAsc:
		return []byte(s), nil
	case UserProgressListOrderByUpdatedAtDesc:
		return []byte(s), nil
	case UserProgressListOrderByUpdatedAtAsc:
		return []byte(s), nil
	case UserProgressListOrderByTraditionID:
		return []byte(s), nil
	case UserProgressListOrderByInstrumentID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserProgressListOrderBy) UnmarshalText(data []byte) error {
	switch UserProgressListOrderBy(data) {
	case UserProgressListOrderByCreatedAtDesc:
		*s = UserProgressListOrderByCreatedAtDesc
		return nil
	case UserProgressListOrderByCreatedAtAsc:
		*s = UserProgressListOrderByCreatedAtAsc
		return nil
	case UserProgressListOrderByUpdatedAtDesc:
		*s = UserProgressListOrderByUpdatedAtDesc
		return nil
	case UserProgressListOrderByUpdatedAtAsc:
		*s = UserProgressListOrderByUpdatedAtAsc
		return nil
	case UserProgressListOrderByTraditionID:
		*s = UserProgressListOrderByTraditionID
		return nil
	case UserProgressListOrderByInstrumentID:
		*s = UserProgressListOrderByInstrumentID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	// Текст ошибки.
	ErrorMessage string `json:"error_message"`
	// Задействованные поля.
	Fields []string `json:"fields"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ValidationError) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetFields returns the value of Fields.
func (s *ValidationError) GetFields() []string {
	return s.Fields
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ValidationError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetFields sets the value of Fields.
func (s *ValidationError) SetFields(val []string) {
	s.Fields = val
}

type ValidationErrors []ValidationError

func (*ValidationErrors) complexChallengeGoalCreateRes() {}
func (*ValidationErrors) complexChallengeGoalUpdateRes() {}
func (*ValidationErrors) complexChallengePublicRes()     {}
func (*ValidationErrors) complexChallengeUpdateRes()     {}
func (*ValidationErrors) complexChallengeValidateRes()   {}
