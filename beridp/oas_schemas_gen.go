// Code generated by ogen, DO NOT EDIT.

package beridp

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Приложение.
// Ref: #/components/schemas/Application
type Application struct {
	// Дата создания приложения.
	CreatedAt time.Time `json:"created_at"`
	// Дата обновления приложения.
	UpdatedAt time.Time `json:"updated_at"`
	// Является ли приложене опубликованным.
	IsPublic bool `json:"is_public"`
	// Название приложения.
	Name string `json:"name"`
	// URL иконки приложения.
	IconURL string `json:"icon_url"`
	// Идентификатор Android приложения.
	PackageName string `json:"package_name"`
	// URL страницы для скачивания приложения.
	StoreURL string `json:"store_url"`
	// DeepLink для запуска приложения.
	LaunchURL string `json:"launch_url"`
	// Вступительное описание.
	Intro string `json:"intro"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Application) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Application) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetIsPublic returns the value of IsPublic.
func (s *Application) GetIsPublic() bool {
	return s.IsPublic
}

// GetName returns the value of Name.
func (s *Application) GetName() string {
	return s.Name
}

// GetIconURL returns the value of IconURL.
func (s *Application) GetIconURL() string {
	return s.IconURL
}

// GetPackageName returns the value of PackageName.
func (s *Application) GetPackageName() string {
	return s.PackageName
}

// GetStoreURL returns the value of StoreURL.
func (s *Application) GetStoreURL() string {
	return s.StoreURL
}

// GetLaunchURL returns the value of LaunchURL.
func (s *Application) GetLaunchURL() string {
	return s.LaunchURL
}

// GetIntro returns the value of Intro.
func (s *Application) GetIntro() string {
	return s.Intro
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Application) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Application) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetIsPublic sets the value of IsPublic.
func (s *Application) SetIsPublic(val bool) {
	s.IsPublic = val
}

// SetName sets the value of Name.
func (s *Application) SetName(val string) {
	s.Name = val
}

// SetIconURL sets the value of IconURL.
func (s *Application) SetIconURL(val string) {
	s.IconURL = val
}

// SetPackageName sets the value of PackageName.
func (s *Application) SetPackageName(val string) {
	s.PackageName = val
}

// SetStoreURL sets the value of StoreURL.
func (s *Application) SetStoreURL(val string) {
	s.StoreURL = val
}

// SetLaunchURL sets the value of LaunchURL.
func (s *Application) SetLaunchURL(val string) {
	s.LaunchURL = val
}

// SetIntro sets the value of Intro.
func (s *Application) SetIntro(val string) {
	s.Intro = val
}

type ApplicationID uuid.UUID

type ApplicationsListIsPublic string

const (
	ApplicationsListIsPublicTrue  ApplicationsListIsPublic = "true"
	ApplicationsListIsPublicFalse ApplicationsListIsPublic = "false"
	ApplicationsListIsPublicAll   ApplicationsListIsPublic = "all"
)

// MarshalText implements encoding.TextMarshaler.
func (s ApplicationsListIsPublic) MarshalText() ([]byte, error) {
	switch s {
	case ApplicationsListIsPublicTrue:
		return []byte(s), nil
	case ApplicationsListIsPublicFalse:
		return []byte(s), nil
	case ApplicationsListIsPublicAll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApplicationsListIsPublic) UnmarshalText(data []byte) error {
	switch ApplicationsListIsPublic(data) {
	case ApplicationsListIsPublicTrue:
		*s = ApplicationsListIsPublicTrue
		return nil
	case ApplicationsListIsPublicFalse:
		*s = ApplicationsListIsPublicFalse
		return nil
	case ApplicationsListIsPublicAll:
		*s = ApplicationsListIsPublicAll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ApplicationsListOKHeaders wraps []Application with response headers.
type ApplicationsListOKHeaders struct {
	XCount   int64
	Response []Application
}

// GetXCount returns the value of XCount.
func (s *ApplicationsListOKHeaders) GetXCount() int64 {
	return s.XCount
}

// GetResponse returns the value of Response.
func (s *ApplicationsListOKHeaders) GetResponse() []Application {
	return s.Response
}

// SetXCount sets the value of XCount.
func (s *ApplicationsListOKHeaders) SetXCount(val int64) {
	s.XCount = val
}

// SetResponse sets the value of Response.
func (s *ApplicationsListOKHeaders) SetResponse(val []Application) {
	s.Response = val
}

type ApplicationsListOrderBy string

const (
	ApplicationsListOrderByCreatedAtAsc  ApplicationsListOrderBy = "created_at_asc"
	ApplicationsListOrderByCreatedAtDesc ApplicationsListOrderBy = "created_at_desc"
	ApplicationsListOrderByUpdatedAtAsc  ApplicationsListOrderBy = "updated_at_asc"
	ApplicationsListOrderByUpdatedAtDesc ApplicationsListOrderBy = "updated_at_desc"
)

// MarshalText implements encoding.TextMarshaler.
func (s ApplicationsListOrderBy) MarshalText() ([]byte, error) {
	switch s {
	case ApplicationsListOrderByCreatedAtAsc:
		return []byte(s), nil
	case ApplicationsListOrderByCreatedAtDesc:
		return []byte(s), nil
	case ApplicationsListOrderByUpdatedAtAsc:
		return []byte(s), nil
	case ApplicationsListOrderByUpdatedAtDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApplicationsListOrderBy) UnmarshalText(data []byte) error {
	switch ApplicationsListOrderBy(data) {
	case ApplicationsListOrderByCreatedAtAsc:
		*s = ApplicationsListOrderByCreatedAtAsc
		return nil
	case ApplicationsListOrderByCreatedAtDesc:
		*s = ApplicationsListOrderByCreatedAtDesc
		return nil
	case ApplicationsListOrderByUpdatedAtAsc:
		*s = ApplicationsListOrderByUpdatedAtAsc
		return nil
	case ApplicationsListOrderByUpdatedAtDesc:
		*s = ApplicationsListOrderByUpdatedAtDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BerlogaJWT struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *BerlogaJWT) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *BerlogaJWT) SetAPIKey(val string) {
	s.APIKey = val
}

type Error struct {
	// Текстовое описание ошибки. В первую очередь
	// предназначено для разработчиков. Но в случае
	// отсуствия `verbose_message` в ответе, можно использовать и
	// `error_message`.
	ErrorMessage string `json:"error_message"`
	// Человеко-понятное описание ошибки. Присуствует
	// только в некоторых случаях.
	VerboseMessage OptString `json:"verbose_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Error) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetVerboseMessage returns the value of VerboseMessage.
func (s *Error) GetVerboseMessage() OptString {
	return s.VerboseMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Error) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetVerboseMessage sets the value of VerboseMessage.
func (s *Error) SetVerboseMessage(val OptString) {
	s.VerboseMessage = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ErrorStatusCode) playerGetRes() {}

type IssueTokenCreated struct {
	// Аутентификационный токен.
	Token string `json:"token"`
	// Кол-во секунд через которое истечет срок жизни токена.
	ExpiresIn int32 `json:"expires_in"`
}

// GetToken returns the value of Token.
func (s *IssueTokenCreated) GetToken() string {
	return s.Token
}

// GetExpiresIn returns the value of ExpiresIn.
func (s *IssueTokenCreated) GetExpiresIn() int32 {
	return s.ExpiresIn
}

// SetToken sets the value of Token.
func (s *IssueTokenCreated) SetToken(val string) {
	s.Token = val
}

// SetExpiresIn sets the value of ExpiresIn.
func (s *IssueTokenCreated) SetExpiresIn(val int32) {
	s.ExpiresIn = val
}

type IssueTokenReq struct {
	ApplicationID ApplicationID `json:"application_id"`
	PlayerID      PlayerID      `json:"player_id"`
	PlayerSecret  PlayerSecret  `json:"player_secret"`
}

// GetApplicationID returns the value of ApplicationID.
func (s *IssueTokenReq) GetApplicationID() ApplicationID {
	return s.ApplicationID
}

// GetPlayerID returns the value of PlayerID.
func (s *IssueTokenReq) GetPlayerID() PlayerID {
	return s.PlayerID
}

// GetPlayerSecret returns the value of PlayerSecret.
func (s *IssueTokenReq) GetPlayerSecret() PlayerSecret {
	return s.PlayerSecret
}

// SetApplicationID sets the value of ApplicationID.
func (s *IssueTokenReq) SetApplicationID(val ApplicationID) {
	s.ApplicationID = val
}

// SetPlayerID sets the value of PlayerID.
func (s *IssueTokenReq) SetPlayerID(val PlayerID) {
	s.PlayerID = val
}

// SetPlayerSecret sets the value of PlayerSecret.
func (s *IssueTokenReq) SetPlayerSecret(val PlayerSecret) {
	s.PlayerSecret = val
}

// NewOptApplicationsListIsPublic returns new OptApplicationsListIsPublic with value set to v.
func NewOptApplicationsListIsPublic(v ApplicationsListIsPublic) OptApplicationsListIsPublic {
	return OptApplicationsListIsPublic{
		Value: v,
		Set:   true,
	}
}

// OptApplicationsListIsPublic is optional ApplicationsListIsPublic.
type OptApplicationsListIsPublic struct {
	Value ApplicationsListIsPublic
	Set   bool
}

// IsSet returns true if OptApplicationsListIsPublic was set.
func (o OptApplicationsListIsPublic) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicationsListIsPublic) Reset() {
	var v ApplicationsListIsPublic
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicationsListIsPublic) SetTo(v ApplicationsListIsPublic) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicationsListIsPublic) Get() (v ApplicationsListIsPublic, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicationsListIsPublic) Or(d ApplicationsListIsPublic) ApplicationsListIsPublic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApplicationsListOrderBy returns new OptApplicationsListOrderBy with value set to v.
func NewOptApplicationsListOrderBy(v ApplicationsListOrderBy) OptApplicationsListOrderBy {
	return OptApplicationsListOrderBy{
		Value: v,
		Set:   true,
	}
}

// OptApplicationsListOrderBy is optional ApplicationsListOrderBy.
type OptApplicationsListOrderBy struct {
	Value ApplicationsListOrderBy
	Set   bool
}

// IsSet returns true if OptApplicationsListOrderBy was set.
func (o OptApplicationsListOrderBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicationsListOrderBy) Reset() {
	var v ApplicationsListOrderBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicationsListOrderBy) SetTo(v ApplicationsListOrderBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicationsListOrderBy) Get() (v ApplicationsListOrderBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicationsListOrderBy) Or(d ApplicationsListOrderBy) ApplicationsListOrderBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PlayerGetOK struct {
	// Возвращается, если передан параметр `get_talent_id=true`. Если
	// у игрока не имеется привязанной учетной записи
	// Таланта, значением будет `null`.
	TalentID OptNilInt32 `json:"talent_id"`
	// Возвращается, если передан параметр `get_player_ids=true`.
	PlayerIds []PlayerID `json:"player_ids"`
}

// GetTalentID returns the value of TalentID.
func (s *PlayerGetOK) GetTalentID() OptNilInt32 {
	return s.TalentID
}

// GetPlayerIds returns the value of PlayerIds.
func (s *PlayerGetOK) GetPlayerIds() []PlayerID {
	return s.PlayerIds
}

// SetTalentID sets the value of TalentID.
func (s *PlayerGetOK) SetTalentID(val OptNilInt32) {
	s.TalentID = val
}

// SetPlayerIds sets the value of PlayerIds.
func (s *PlayerGetOK) SetPlayerIds(val []PlayerID) {
	s.PlayerIds = val
}

func (*PlayerGetOK) playerGetRes() {}

type PlayerID uuid.UUID

type PlayerSecret string

type PlayersCreateCreated struct {
	PlayerID     PlayerID     `json:"player_id"`
	PlayerSecret PlayerSecret `json:"player_secret"`
}

// GetPlayerID returns the value of PlayerID.
func (s *PlayersCreateCreated) GetPlayerID() PlayerID {
	return s.PlayerID
}

// GetPlayerSecret returns the value of PlayerSecret.
func (s *PlayersCreateCreated) GetPlayerSecret() PlayerSecret {
	return s.PlayerSecret
}

// SetPlayerID sets the value of PlayerID.
func (s *PlayersCreateCreated) SetPlayerID(val PlayerID) {
	s.PlayerID = val
}

// SetPlayerSecret sets the value of PlayerSecret.
func (s *PlayersCreateCreated) SetPlayerSecret(val PlayerSecret) {
	s.PlayerSecret = val
}

type PlayersCreateReq struct {
	ApplicationID ApplicationID `json:"application_id"`
	// DeviceID.
	DeviceID string `json:"device_id"`
}

// GetApplicationID returns the value of ApplicationID.
func (s *PlayersCreateReq) GetApplicationID() ApplicationID {
	return s.ApplicationID
}

// GetDeviceID returns the value of DeviceID.
func (s *PlayersCreateReq) GetDeviceID() string {
	return s.DeviceID
}

// SetApplicationID sets the value of ApplicationID.
func (s *PlayersCreateReq) SetApplicationID(val ApplicationID) {
	s.ApplicationID = val
}

// SetDeviceID sets the value of DeviceID.
func (s *PlayersCreateReq) SetDeviceID(val string) {
	s.DeviceID = val
}

type PlayersMigrateOK struct {
	PlayerSecret PlayerSecret `json:"player_secret"`
}

// GetPlayerSecret returns the value of PlayerSecret.
func (s *PlayersMigrateOK) GetPlayerSecret() PlayerSecret {
	return s.PlayerSecret
}

// SetPlayerSecret sets the value of PlayerSecret.
func (s *PlayersMigrateOK) SetPlayerSecret(val PlayerSecret) {
	s.PlayerSecret = val
}

type PlayersMigrateReq struct {
	ApplicationID ApplicationID `json:"application_id"`
	PlayerID      PlayerID      `json:"player_id"`
}

// GetApplicationID returns the value of ApplicationID.
func (s *PlayersMigrateReq) GetApplicationID() ApplicationID {
	return s.ApplicationID
}

// GetPlayerID returns the value of PlayerID.
func (s *PlayersMigrateReq) GetPlayerID() PlayerID {
	return s.PlayerID
}

// SetApplicationID sets the value of ApplicationID.
func (s *PlayersMigrateReq) SetApplicationID(val ApplicationID) {
	s.ApplicationID = val
}

// SetPlayerID sets the value of PlayerID.
func (s *PlayersMigrateReq) SetPlayerID(val PlayerID) {
	s.PlayerID = val
}

type ServiceKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ServiceKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ServiceKey) SetAPIKey(val string) {
	s.APIKey = val
}

// TalentOAuthCompleteFound is response for TalentOAuthComplete operation.
type TalentOAuthCompleteFound struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *TalentOAuthCompleteFound) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *TalentOAuthCompleteFound) SetLocation(val string) {
	s.Location = val
}

// TalentOAuthConnectFound is response for TalentOAuthConnect operation.
type TalentOAuthConnectFound struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *TalentOAuthConnectFound) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *TalentOAuthConnectFound) SetLocation(val string) {
	s.Location = val
}

type UserTokenGetOK struct{}

type UserTokenRefreshOK struct{}
