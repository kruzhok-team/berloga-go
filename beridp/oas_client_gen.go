// Code generated by ogen, DO NOT EDIT.

package beridp

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// ApplicationsList invokes ApplicationsList operation.
	//
	// Список приложений.
	// По-умолчанию сортируется по дате создания от новых к
	// старым (`order_by=created_at_desc`) и включает в себя только
	// опубликованные приложения (`is_public=true`).
	//
	// GET /applications
	ApplicationsList(ctx context.Context, params ApplicationsListParams) (*ApplicationsListOKHeaders, error)
	// IssueToken invokes IssueToken operation.
	//
	// Запрос аутентфикационного токена игрока.
	// Токен имеет ограниченное непродолжительное время
	// жизни.
	//
	// POST /issue-token
	IssueToken(ctx context.Context, request *IssueTokenReq) (*IssueTokenCreated, error)
	// PlayerGet invokes PlayerGet operation.
	//
	// Чтение информации об игроке.
	// По-умолчанию ответ не содержит каких-либо данных. Для
	// того чтобы добавить в ответ какие-то из параметров
	// игрока, нужно указать их соотвествующими параметрами
	// запроса `get_*`.
	//
	// GET /player/{player_id}
	PlayerGet(ctx context.Context, params PlayerGetParams) (PlayerGetRes, error)
	// PlayersCreate invokes PlayersCreate operation.
	//
	// Регистрация нового PlayerID.
	//
	// POST /players
	PlayersCreate(ctx context.Context, request *PlayersCreateReq) (*PlayersCreateCreated, error)
	// PlayersMigrate invokes PlayersMigrate operation.
	//
	// Миграция имеющихся данных о PlayerID под актуальное API
	// сервисов Берлоги.
	// В ответе возвращается PlayerSecret, который обязательно
	// нужно сохранить на клиенте. Без него не получится
	// пройти авторизацию клиентского API и они станут не
	// доступны для этого PlayerID.
	//
	// POST /players/migrate
	PlayersMigrate(ctx context.Context, request *PlayersMigrateReq) (*PlayersMigrateOK, error)
	// TalentOAuthAuthorize invokes TalentOAuthAuthorize operation.
	//
	// Авторизация существующим токеном.
	//
	// POST /talent-oauth/authorize
	TalentOAuthAuthorize(ctx context.Context, params TalentOAuthAuthorizeParams) error
	// TalentOAuthComplete invokes TalentOAuthComplete operation.
	//
	// Эндпоинт завершения авторизации Берлоги и
	// перенаправление в приложение.
	//
	// GET /talent-oauth/complete
	TalentOAuthComplete(ctx context.Context, params TalentOAuthCompleteParams) (*TalentOAuthCompleteFound, error)
	// TalentOAuthConnect invokes TalentOAuthConnect operation.
	//
	// Перенаправление на клиентский эндпонит OAuth
	// авторизации Берлоги в Таланте.
	//
	// GET /talent-oauth/connect
	TalentOAuthConnect(ctx context.Context, params TalentOAuthConnectParams) (*TalentOAuthConnectFound, error)
	// TalentOAuthDisconnect invokes TalentOAuthDisconnect operation.
	//
	// Если у игрока и так (уже) нет авторизованной учетной
	// записи Таланта, то метод вернет `204` ответ так же как
	// при успешном отсоединении оной.
	//
	// POST /talent-oauth/disconnect
	TalentOAuthDisconnect(ctx context.Context) error
	// TalentUserPlayers invokes TalentUserPlayers operation.
	//
	// Список PlayerID пользователя Таланта.
	//
	// GET /talent/{talent_id}/players
	TalentUserPlayers(ctx context.Context, params TalentUserPlayersParams) ([]PlayerID, error)
	// TalentUserTokenGet invokes TalentUserTokenGet operation.
	//
	// TalentOAuth токен пользователя.
	//
	// GET /talent/{talent_id}/token
	TalentUserTokenGet(ctx context.Context, params TalentUserTokenGetParams) (string, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// ApplicationsList invokes ApplicationsList operation.
//
// Список приложений.
// По-умолчанию сортируется по дате создания от новых к
// старым (`order_by=created_at_desc`) и включает в себя только
// опубликованные приложения (`is_public=true`).
//
// GET /applications
func (c *Client) ApplicationsList(ctx context.Context, params ApplicationsListParams) (*ApplicationsListOKHeaders, error) {
	res, err := c.sendApplicationsList(ctx, params)
	return res, err
}

func (c *Client) sendApplicationsList(ctx context.Context, params ApplicationsListParams) (res *ApplicationsListOKHeaders, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("ApplicationsList"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/applications"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "ApplicationsList",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/applications"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "offset" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Offset.Get(); ok {
				return e.EncodeValue(conv.Int32ToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "limit" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Limit.Get(); ok {
				return e.EncodeValue(conv.Int32ToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "is_public" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "is_public",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.IsPublic.Get(); ok {
				return e.EncodeValue(conv.StringToString(string(val)))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "order_by" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "order_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.OrderBy.Get(); ok {
				return e.EncodeValue(conv.StringToString(string(val)))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeApplicationsListResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// IssueToken invokes IssueToken operation.
//
// Запрос аутентфикационного токена игрока.
// Токен имеет ограниченное непродолжительное время
// жизни.
//
// POST /issue-token
func (c *Client) IssueToken(ctx context.Context, request *IssueTokenReq) (*IssueTokenCreated, error) {
	res, err := c.sendIssueToken(ctx, request)
	return res, err
}

func (c *Client) sendIssueToken(ctx context.Context, request *IssueTokenReq) (res *IssueTokenCreated, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("IssueToken"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/issue-token"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "IssueToken",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/issue-token"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeIssueTokenRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeIssueTokenResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PlayerGet invokes PlayerGet operation.
//
// Чтение информации об игроке.
// По-умолчанию ответ не содержит каких-либо данных. Для
// того чтобы добавить в ответ какие-то из параметров
// игрока, нужно указать их соотвествующими параметрами
// запроса `get_*`.
//
// GET /player/{player_id}
func (c *Client) PlayerGet(ctx context.Context, params PlayerGetParams) (PlayerGetRes, error) {
	res, err := c.sendPlayerGet(ctx, params)
	return res, err
}

func (c *Client) sendPlayerGet(ctx context.Context, params PlayerGetParams) (res PlayerGetRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("PlayerGet"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/player/{player_id}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PlayerGet",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/player/"
	{
		// Encode "player_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "player_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			if unwrapped := uuid.UUID(params.PlayerID); true {
				return e.EncodeValue(conv.UUIDToString(unwrapped))
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "get_talent_id" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "get_talent_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.GetTalentID.Get(); ok {
				return e.EncodeValue(conv.BoolToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "get_player_ids" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "get_player_ids",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.GetPlayerIds.Get(); ok {
				return e.EncodeValue(conv.BoolToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:BerlogaJWT"
			switch err := c.securityBerlogaJWT(ctx, "PlayerGet", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"BerlogaJWT\"")
			}
		}
		{
			stage = "Security:ServiceKey"
			switch err := c.securityServiceKey(ctx, "PlayerGet", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 1
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ServiceKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
				{0b00000010},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePlayerGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PlayersCreate invokes PlayersCreate operation.
//
// Регистрация нового PlayerID.
//
// POST /players
func (c *Client) PlayersCreate(ctx context.Context, request *PlayersCreateReq) (*PlayersCreateCreated, error) {
	res, err := c.sendPlayersCreate(ctx, request)
	return res, err
}

func (c *Client) sendPlayersCreate(ctx context.Context, request *PlayersCreateReq) (res *PlayersCreateCreated, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("PlayersCreate"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/players"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PlayersCreate",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/players"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePlayersCreateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePlayersCreateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PlayersMigrate invokes PlayersMigrate operation.
//
// Миграция имеющихся данных о PlayerID под актуальное API
// сервисов Берлоги.
// В ответе возвращается PlayerSecret, который обязательно
// нужно сохранить на клиенте. Без него не получится
// пройти авторизацию клиентского API и они станут не
// доступны для этого PlayerID.
//
// POST /players/migrate
func (c *Client) PlayersMigrate(ctx context.Context, request *PlayersMigrateReq) (*PlayersMigrateOK, error) {
	res, err := c.sendPlayersMigrate(ctx, request)
	return res, err
}

func (c *Client) sendPlayersMigrate(ctx context.Context, request *PlayersMigrateReq) (res *PlayersMigrateOK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("PlayersMigrate"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/players/migrate"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PlayersMigrate",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/players/migrate"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePlayersMigrateRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePlayersMigrateResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentOAuthAuthorize invokes TalentOAuthAuthorize operation.
//
// Авторизация существующим токеном.
//
// POST /talent-oauth/authorize
func (c *Client) TalentOAuthAuthorize(ctx context.Context, params TalentOAuthAuthorizeParams) error {
	_, err := c.sendTalentOAuthAuthorize(ctx, params)
	return err
}

func (c *Client) sendTalentOAuthAuthorize(ctx context.Context, params TalentOAuthAuthorizeParams) (res *TalentOAuthAuthorizeOK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentOAuthAuthorize"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/talent-oauth/authorize"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentOAuthAuthorize",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/talent-oauth/authorize"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "EncodeHeaderParams"
	h := uri.NewHeaderEncoder(r.Header)
	{
		cfg := uri.HeaderParameterEncodingConfig{
			Name:    "X-Token",
			Explode: false,
		}
		if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.XToken))
		}); err != nil {
			return res, errors.Wrap(err, "encode header")
		}
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:BerlogaJWT"
			switch err := c.securityBerlogaJWT(ctx, "TalentOAuthAuthorize", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"BerlogaJWT\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentOAuthAuthorizeResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentOAuthComplete invokes TalentOAuthComplete operation.
//
// Эндпоинт завершения авторизации Берлоги и
// перенаправление в приложение.
//
// GET /talent-oauth/complete
func (c *Client) TalentOAuthComplete(ctx context.Context, params TalentOAuthCompleteParams) (*TalentOAuthCompleteFound, error) {
	res, err := c.sendTalentOAuthComplete(ctx, params)
	return res, err
}

func (c *Client) sendTalentOAuthComplete(ctx context.Context, params TalentOAuthCompleteParams) (res *TalentOAuthCompleteFound, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentOAuthComplete"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/talent-oauth/complete"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentOAuthComplete",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/talent-oauth/complete"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "code" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Code))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "state" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UUIDToString(params.State))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentOAuthCompleteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentOAuthConnect invokes TalentOAuthConnect operation.
//
// Перенаправление на клиентский эндпонит OAuth
// авторизации Берлоги в Таланте.
//
// GET /talent-oauth/connect
func (c *Client) TalentOAuthConnect(ctx context.Context, params TalentOAuthConnectParams) (*TalentOAuthConnectFound, error) {
	res, err := c.sendTalentOAuthConnect(ctx, params)
	return res, err
}

func (c *Client) sendTalentOAuthConnect(ctx context.Context, params TalentOAuthConnectParams) (res *TalentOAuthConnectFound, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentOAuthConnect"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/talent-oauth/connect"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentOAuthConnect",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/talent-oauth/connect"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeQueryParams"
	q := uri.NewQueryEncoder()
	{
		// Encode "redirect_uri" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "redirect_uri",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.RedirectURI.Get(); ok {
				return e.EncodeValue(conv.StringToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:BerlogaJWT"
			switch err := c.securityBerlogaJWT(ctx, "TalentOAuthConnect", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"BerlogaJWT\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentOAuthConnectResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentOAuthDisconnect invokes TalentOAuthDisconnect operation.
//
// Если у игрока и так (уже) нет авторизованной учетной
// записи Таланта, то метод вернет `204` ответ так же как
// при успешном отсоединении оной.
//
// POST /talent-oauth/disconnect
func (c *Client) TalentOAuthDisconnect(ctx context.Context) error {
	_, err := c.sendTalentOAuthDisconnect(ctx)
	return err
}

func (c *Client) sendTalentOAuthDisconnect(ctx context.Context) (res *TalentOAuthDisconnectNoContent, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentOAuthDisconnect"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/talent-oauth/disconnect"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentOAuthDisconnect",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/talent-oauth/disconnect"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:BerlogaJWT"
			switch err := c.securityBerlogaJWT(ctx, "TalentOAuthDisconnect", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"BerlogaJWT\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentOAuthDisconnectResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentUserPlayers invokes TalentUserPlayers operation.
//
// Список PlayerID пользователя Таланта.
//
// GET /talent/{talent_id}/players
func (c *Client) TalentUserPlayers(ctx context.Context, params TalentUserPlayersParams) ([]PlayerID, error) {
	res, err := c.sendTalentUserPlayers(ctx, params)
	return res, err
}

func (c *Client) sendTalentUserPlayers(ctx context.Context, params TalentUserPlayersParams) (res []PlayerID, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentUserPlayers"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/talent/{talent_id}/players"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentUserPlayers",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/talent/"
	{
		// Encode "talent_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "talent_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.Int32ToString(params.TalentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/players"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:ServiceKey"
			switch err := c.securityServiceKey(ctx, "TalentUserPlayers", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ServiceKey\"")
			}
		}
		{
			stage = "Security:TalentOAuth"
			switch err := c.securityTalentOAuth(ctx, "TalentUserPlayers", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 1
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"TalentOAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
				{0b00000010},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentUserPlayersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// TalentUserTokenGet invokes TalentUserTokenGet operation.
//
// TalentOAuth токен пользователя.
//
// GET /talent/{talent_id}/token
func (c *Client) TalentUserTokenGet(ctx context.Context, params TalentUserTokenGetParams) (string, error) {
	res, err := c.sendTalentUserTokenGet(ctx, params)
	return res, err
}

func (c *Client) sendTalentUserTokenGet(ctx context.Context, params TalentUserTokenGetParams) (res string, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("TalentUserTokenGet"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/talent/{talent_id}/token"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "TalentUserTokenGet",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/talent/"
	{
		// Encode "talent_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "talent_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.Int32ToString(params.TalentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/token"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{
			stage = "Security:ServiceKey"
			switch err := c.securityServiceKey(ctx, "TalentUserTokenGet", r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ServiceKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeTalentUserTokenGetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
